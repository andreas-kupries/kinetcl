#!/usr/bin/env tclsh8.5
## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Requirements

package require kinetcl
package require kinetcl::canvas::joints
package require kinetcl::canvas::skeleton
package require Tk
package require crimp::tk
package require crimp

# # ## ### ##### ######## ############# #####################

# Data structures = Hidden in joints tracker and the canvas adapters.
# Eventflow = Hidden in the joints tracker.

# # ## ### ##### ######## ############# #####################

proc main {} {
    cmdline
    setup
    run
    return
}

# # ## ### ##### ######## ############# #####################

proc cmdline {} {
    global argv record
    if {[llength $argv] > 1} usage
    lassign $argv record
    return
}

proc usage {} {
    global argv0
    puts stderr "usage: $argv0 ?record?"
    exit 1
}

proc setup {} {
    global record

    kinetcl depth create  D
    kinetcl user  create  U

    U set-profile all
    lassign [dict get [D meta] map res] w h
    #D destroy - No. We need this for coordinate
    #            conversion world -> screen also.

    puts "$w x $h"

    canvas      .image \
	-scrollregion [list 0 0 $w $h] \
	-width $w -height $h
    ttk::button .exit -text Exit -command ::exit

    # More buttons: stop/start recording
    pack .image -side top -expand 1 -fill both
    pack .exit  -side left

    kinetcl joints          create J U ; # (J)oints tracking U.
    kinetcl canvas joints   create CJ .image D J ; # draw joints
    kinetcl canvas skeleton create CS .image D J ; # draw lines

    bind all <q> ::exit

    rec_ui

    update idletasks
    return
}

proc run {} {
    ping start...
    kinetcl start
    ping process...
    while {1} record
    return
}

proc ping {text} {
    puts -nonewline \r$text
    flush stdout
    return
}

# # ## ### ##### ######## ############# #####################
## Manage a recorder

proc rec_ui {} {
    global record r_label r_state r_chan

    # Recorder available only if file provided
    if {$record eq {}} return

    kinetcl::eventbindings create R J

    ttk::checkbutton .rec \
	-textvariable ::r_label \
	-variable ::r_state \
	-command ::rec_manage
    pack .rec  -side right

    set r_state 0   ; # off by default.
    set r_label (+) ; # labeled for 'start'
    set r_chan {}   ; # no channel
    return
}

proc rec_manage {} {
    global r_label r_state r_chan record

    if {$r_state} {
	# Start recording: Open file (append), relabel for stop, set
	# bindings to get the events to record.

	set r_chan [open $record a]
	set r_label (-)
	R bind user-create  ::rec_event
	R bind user-move    ::rec_event
	R bind user-destroy ::rec_event
    } else {
	# Stop recording: Disconnect events, relabel for start, close
	# file.

	R unbind
	set r_label (+)
	close $r_chan
    }
    return
}

proc rec_event {event obj details} {
    # Event handler, write to recorder destination file.
    global r_chan
    puts $r_chan [list $event $details]
    return
}

# # ## ### ##### ######## ############# #####################

proc record {} {
    kinetcl waitUpdate
    kinetcl estop
    update
    kinetcl estart
    return
}

# # ## ### ##### ######## ############# #####################
main
exit
