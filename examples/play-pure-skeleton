#!/usr/bin/env tclsh8.5
## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Requirements

package require kinetcl
package require kinetcl::canvas::joints
package require kinetcl::canvas::skeleton
package require Tk
package require struct::set

# # ## ### ##### ######## ############# #####################

# Data structures = Hidden in joints tracker and the canvas adapters.
# Eventflow = Hidden in the joints tracker.

# # ## ### ##### ######## ############# #####################

proc main {} {
    cmdline
    setup
    run
    return
}

# # ## ### ##### ######## ############# #####################

proc cmdline {} {
    global argv record
    if {[llength $argv] != 1} usage
    lassign $argv record
    return
}

proc usage {} {
    global argv0
    puts stderr "usage: $argv0 record"
    exit 1
}

proc setup {} {
    global record

    kinetcl depth create D
    # We create this node only for the ability to convert between
    # world and screen coordinates. We are not starting this
    # generator. Oh, and we use its WxH for our canvas.
    #
    # // lets see if that works, or if the generator must be active
    # // for the conversion to be possible.
    # // It works. Still, would be nicer to have a conversion
    # // independent of a depth generator, at all.

    lassign [dict get [D meta] map res] w h
    #D destroy - No. We need this for coordinate
    #            conversion world -> screen also.

    puts "$w x $h"

    canvas      .image \
	-scrollregion [list 0 0 $w $h] \
	-width $w -height $h
    ttk::button .exit -text Exit -command ::exit

    # More buttons: stop/start recording
    pack .image -side top -expand 1 -fill both
    pack .exit  -side left

    # P is a simple ensemble providing the API to the player data
    kinetcl canvas joints   create CJ .image D P ; # draw joints
    kinetcl canvas skeleton create CS .image D P ; # draw lines

    bind all <q> ::exit

    play_ui

    update idletasks
    return
}

proc run {} {
    ping start...
    kinetcl start
    ping process...
    vwait forever ; #while {1} record
    return
}

proc ping {text} {
    puts -nonewline \r$text
    flush stdout
    return
}

# # ## ### ##### ######## ############# #####################
## Manage the player.
#
## Buttons
## - first
## - back
## - back step 5
## - back step 1
## - stop
## - forw step 1
## - forw step 5
## - forw
## - last
#
## TODO: Link player state/activity to button availability.

array set p_invert {
    user-create  user-destroy
    user-move    user-move
    user-destroy user-create
}

# future - mega widget.
proc play_ui {} {
    global record p_state p_states p_joints p_at p_max p_timer p_dir p_location

    ttk::label  .pat -textvariable ::p_atl

    ttk::button .pfirst -text {(1st)}  -command {::p_back 0}
    ttk::button .pbf    -text {<<}     -command {::p_back 5c}
    ttk::button .pb     -text {<}      -command {::p_back 1c}
    ttk::button .pb5    -text {<5}     -command {::p_back 5}
    ttk::button .pb1    -text {<1}     -command {::p_back 1}
    ttk::button .pstop  -text {Stop}   -command ::p_stop
    ttk::button .pf1    -text {>1}     -command {::p_forw 1}
    ttk::button .pf5    -text {>5}     -command {::p_forw 5}
    ttk::button .pf     -text {>}      -command {::p_forw 1c}
    ttk::button .pff    -text {>>}     -command {::p_forw 5c}
    ttk::button .plast  -text {(last)} -command {::p_forw end}

    pack .plast  -side right
    pack .pff    -side right
    pack .pf     -side right
    pack .pf5    -side right
    pack .pf1    -side right
    pack .pstop  -side right
    pack .pb1    -side right
    pack .pb5    -side right
    pack .pb     -side right
    pack .pbf    -side right
    pack .pfirst -side right

    pack .pat    -side right

    set c [open $record r]
    set events [split [read $c] \n]
    close $c

    # Parse the events and produce a complete timeline of joint
    # information, and system state.
    # states).
    set skel  {} ; # skeleton index
    set state {} ; # state dictionary: user --> joints
    set p_joints {}
    foreach e $events {
	lassign $e event detail
	dict with detail {} ; # => user, ?joints?
	if {[info exists joints]} {
	    set skel [llength $p_joints]
	    lappend p_joints $joints
	    unset joints
	}
	if {$skel eq {}} continue
	switch -exact -- $event {
	    user-create -
	    user-move {
		dict set state $user $skel
	    }
	    user-destroy {
		dict unset state $user
	    }
	}
	lappend p_states $state
    }

    set p_at    -1
    set p_state {}
    set p_max   [expr {[llength $p_states] - 1}]
    set p_timer {}
    set p_dir   {}
    set p_atl /$p_max

    p_jump 0
    return
}

proc p_stop {} {
    global p_timer
    catch { after cancel $p_timer }
    set p_timer {}
    return
}

proc p_back {by} {
    global p_at p_max
    switch -exact -- $by {
	1   { p_step -1 }
	5   { p_step -5 }
	1c  { p_play 1 backward }
	5c  { p_play 5 backward }
	0   { p_jump 0 }
    }
}

proc p_forw {by} {
    global p_at p_max
    switch -exact -- $by {
	1   { p_step 1 }
	5   { p_step 5 }
	1c  { p_play 1 forward }
	5c  { p_play 5 forward }
	end { p_jump $p_max }
    }
}

proc p_step {{by 1}} {
    global p_at
    p_jump [expr {$p_at + $by}]
    return
}

proc p_jump {new} {
    global p_at p_max p_states p_state p_atl

    if {($new < 0) || ($new > $p_max)} {
	p_stop
	return
    }

    set newstate [lindex $p_states $new]
    p_generate $p_state $newstate

    set p_at    $new
    set p_state $newstate

    set p_atl $p_at/$p_max
    return
}

## TODO simplify code below, using struct::set symdiff.
## TODO Fix joint event issues, using struct::set symdiff.
##      Currently it may miss creation/destruction of joints
##      in the transition (confidence changes).
proc p_generate {olds news} {
    global p_joints

    array set o $olds
    array set n $news

    lassign [struct::set intersect3 [array names o] [array names n]] \
	moved removed added

    foreach u $removed {
	set udetails [dict create user $u]

	# destroy joints from previous state.
	foreach {j p} [lindex $p_joints $o($u)] {
	    set details [dict create user $u joint $j]
	    uevent generate P joint-destroy $details
	}

	# Then destroy the user
	uevent generate P user-destroy $udetails
    }

    foreach u $moved {
	set udetails [dict create user $u]

	# Compare joints in the old and new state, for a user which
	# was kept, and generate the appropriate events.
	set oj [lindex $p_joints $o($u)]
	set nj [lindex $p_joints $n($u)]

	lassign [struct::set intersect3 [dict keys $oj] [dict keys $nj]] \
	    jmoved jremoved jadded

	foreach j $jremoved {
	    set details [dict create user $u joint $j]
	    uevent generate P joint-destroy $details
	}

	foreach j $jmoved {
	    # Could compare positions further and ignore unchanged
	    # joints. Doesn't really matter.
	    set details [dict create user $u joint $j position [dict get $nj $j]]
	    uevent generate P joint-move $details
	}

	foreach j $jadded {
	    set details [dict create user $u joint $j position [dict get $nj $j]]
	    uevent generate P joint-create $details
	}

	# Then move the user
	uevent generate P user-move $udetails
    }

    foreach u $added {
	set udetails [dict create user $u]

	# Create user
	uevent generate P user-create $udetails

	# Then create the joints in the new state
	foreach {j p} [lindex $p_joints $n($u)] {
	    set details [dict create user $u joint $j position $p]
	    uevent generate P joint-create $details
	}
    }

    return
}

# # ## ### ##### ######## ############# #####################

proc p_play {by direction} {
    global p_timer p_dir

    if {$p_dir ne $direction} {
	p_stop
    }
    if {$p_timer ne {}} {
	# ignore multiple calls.
	return
    }

    if {$direction eq "backward"} {
	set by [expr {- $by}]
    }
    set p_dir   $direction
    set p_timer [after 100 [list p_run $by]]
    return
}

proc p_run {by} {
    global p_dir p_timer
    set p_timer [after 100 [info level 0]]
    p_step $by
    return
}

# # ## ### ##### ######## ############# #####################

namespace eval P {}

proc P::get-skeleton {user} {
    global p_location
    return $p_location($user)
}

proc P::get-joint {user joint} {
    global p_location
    return [dict get $p_location($user) $joint]
}

proc P::bind {e cmd} {
    return [uevent bind P $e [list P::Swap $cmd]]
}

proc P::unbind {token} {
    uevent unbind $token
    return
}

proc P::Swap {cmd t e d} {
    return [uplevel 1 [linsert $cmd end $e $t $d]]
}

namespace eval P {
    namespace export {[a-z]*}
    namespace ensemble create
}

# # ## ### ##### ######## ############# #####################

proc record {} {
    kinetcl waitUpdate
    kinetcl estop
    update
    kinetcl estart
    return
}

# # ## ### ##### ######## ############# #####################
main
exit
