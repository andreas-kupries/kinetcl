#!/usr/bin/env tclsh8.5
## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Requirements

package require kinetcl
package require kinetcl::canvas::joints
package require kinetcl::canvas::skeleton
package require Tk
package require crimp::tk
package require crimp

# # ## ### ##### ######## ############# #####################

# Data structures = Hidden in joints tracker and the canvas adapters.
# Eventflow = Hidden in the joints tracker.

# # ## ### ##### ######## ############# #####################

proc main {} {
    cmdline
    setup
    run
    return
}

# # ## ### ##### ######## ############# #####################

proc cmdline {} {
    global argv
    if {[llength $argv]} usage
    return
}

proc usage {} {
    global argv0
    puts stderr "usage: $argv0"
    exit 1
}

proc setup {} {
    global photo textc
    set textc green

    kinetcl depth create D
    kinetcl user  create U
    U set-profile all

    set size [dict get [D meta] map res]
    lassign $size w h

    puts [join $size { x }]

    set photo [image create photo]
    crimp write 2tk $photo [crimp blank grey8 $w $h 0]

    canvas      .image \
	-scrollregion [list 0 0 $w $h] \
	-width $w -height $h
    ttk::button .exit -text Exit -command ::exit

    .image create image 0 0 -tags PHOTO -anchor nw
    render

    # More buttons: stop/start recording
    pack .image -side top -expand 1 -fill both
    pack .exit  -side left

    D bind newdata              newframe_depth

    kinetcl joints          create J U ; # (J)oints tracking U.
    kinetcl canvas joints   create CJ .image D J ; # draw joints
    kinetcl canvas skeleton create CS .image D J ; # draw lines

    # Center of mass, for label.
    J bind user-create  usernew
    J bind user-move    usermove
    J bind user-destroy userdestroy

    bind all <q> ::exit

    update idletasks
    return
}

proc render {} {
    global photo
    .image itemconfigure PHOTO -image $photo
    .image coords        PHOTO 0 0
    return
}

proc run {} {
    ping start...
    kinetcl start
    ping process...
    while {1} record
    return
}

proc ping {text} {
    puts -nonewline \r$text
    flush stdout
    return
}

# # ## ### ##### ######## ############# #####################

proc newframe_depth {args} {
    global photo
    set s [clock milliseconds]

    ping [set m [D meta]]
    if {[dict get $m map output size] != 614400} { puts "" }
    set image [D map]
    set frame [D frame]

    # Plain contrast compressed gray scale visualization.
    set image [crimp::FITFLOAT [crimp convert 2float $image]] 

    set size [crimp dimensions $image]

    crimp write 2tk $photo $image
    render

    set e [clock milliseconds]
    #ping "[expr {$e - $s}] $frame ($size)       "
    return
}

# # ## ### ##### ######## ############# #####################

proc usernew {event obj details} {
    dict with details {} ; # user

    set at [lrange [lindex [D world2projective [U centerof $user]] 0] 0 1]

    set label [make-text .image {*}$at \
		   -anchor nw \
		   -font {Helvetica 20} \
		   -tags [list t,$user u,$user]]

    .image itemconfigure t,$user -text [getlabel $user]
    return
}

proc usermove {event obj details} {
    dict with details {} ; # user

    set at [lrange [lindex [D world2projective [U centerof $user]] 0] 0 1]

    place-text .image t,$user {*}$at
    return
}

proc userdestroy {event obj details} {
    dict with details {} ; # user
    .image delete t,$user
    return
}

# # ## ### ##### ######## ############# #####################

proc getlabel {user} {
    set text "User $user"
    if {[U is-tracking $user]} {
	append text " tracking"
    } elseif {[U is-calibrated $user]} {
	append text " calibrated"
    } elseif {[U is-calibrating $user]} {
	append text " calibrating"
    }
    return $text
}

proc place-text {c item x y} {
    $c coords $item $x $y
    return
}

proc make-text {c x y args} {
    global textc
    return [$c create text $x $y \
		-fill $textc -text {} \
		{*}$args]
}

# # ## ### ##### ######## ############# #####################

proc record {} {
    kinetcl waitUpdate
    kinetcl estop
    update
    kinetcl estart
    return
}

# # ## ### ##### ######## ############# #####################
main
exit
