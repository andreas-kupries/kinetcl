'\"
'\" Generated from file '/home/aku/Projects/KineTcl/kinetcl/embedded/man/files/kinetcl_installer.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2012 Andreas Kupries
'\" Copyright (c) 2012 Documentation, Andreas Kupries
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "kinetcl_install_guide" n 1 doc "KineTcl"
.BS
.SH NAME
kinetcl_install_guide \- KineTcl - The Installer's Guide
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBkinetcl  ?0.1?\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to KineTcl, a binding of the OpenNI framework providing
Tcl with access to MS Kinect (tm), and related sensor systems.
.PP
The audience of this document is anyone wishing to build the
packages, for either themselves, or others.
.PP
For a developer intending to extend or modify the packages we
additionally provide
.IP [1]
\fIKineTcl - License\fR.
.IP [2]
\fIKineTcl - The Developer's Guide\fR.
.PP
.PP
Please read \fIKineTcl - How To Get The Sources\fR first, if that was
not done already. Here we assume that the sources are already
available in a directory of your choice.
.PP
.SH REQUISITES
.SS TCL
A working Tcl installation is needed, however as we are building a Tcl
package that should be pretty much obvious, and I will not belabor the
point.
.PP
Use whatever you are comfortable with, as long as it provides
Tcl 8.5, or higher, and Tk 8.5 or higher.
.PP
An easy way to get an installation of a recent Tcl 8.5 and the
mentioned packages, which I recommend, is to download and install
\fIActiveState's\fR [http://www.activestate.com]
\fIActiveTcl\fR [http://www.activestate.com/activetcl] for your platform.
Follow the link for ActiveTcl to find it.
.PP
After the installation of ActiveTcl 8.5 in a directory of your
choice run the command
.CS


    teacup update

.CE
This will install a lot more packages than found in the distribution
alone.
(Disclosure: I, Andreas Kupries, work for ActiveState, maintaining
ActiveTcl and TclDevKit).
.PP
For those wishing to build Tcl/Tk on their own, their sources
can be found at
.TP
Tcl
\fIhttp://core.tcl.tk/tcl/\fR
.TP
Tk
\fIhttp://core.tcl.tk/tk/\fR
.PP
.SS CRITCL
The tool \fIcritcl\fR [http://jcw.github.com/critcl] is required to
build KineTcl, either as an application found in the PATH, or as a Tcl
package available to the \fBtclsh\fR used to run KineTcl's
\fBBuild & Installation\fR process.
.PP
Version 3.1 is required, or higher, and the utility package
\fBcritcl::class\fR. This is currently only available on
the \fBdev31\fR branch of the critcl repository at github
linked to in the previous paragraph.
.PP
The link for critcl goes it its official website which explains how to
get its sources. The starkit at the site is \fInot\fR useable, as it
provides only critcl 3, nor the utility package we need.
.PP
When not using a starkit as is required here for the moment, you have
to get and install the sources per the instructions at the site,
i.e. \fIhttp://jcw.github.com/critcl\fR.
.SS "OPENNI / NITE"
KineTcl is, despite its name, not a direct binding to the Kinect
itself. It actually is a binding to the more general OpenNI
framework. This framework provides a set of generic APIs for sensors,
processing algorithms, and applications into which anything following
these APIs can be plugged into.
.PP
PrimeSense, the maker of the 3D sensor found in the Kinect is a
main member of the OpenNI organization managing the framework and
provides plugins for its sensor and various analysis algorithms.
.PP
To build KineTcl the OpenNI binaries have to be
installed. These can be found in the downloads section of the OpenNI
website at \fIhttp://www.openni.org/\fR.
.PP
Development was done against OpenNI version 1.5.2.21. Note that
this version has a bug in its headers. To work around this bug the
headers have to be modified, preferably before installing them.
.PP
Open the header file "\fIXnModuleInterface.h\fR" in the editor
of your choice and look for the declaration of
.CS


     typedef struct XnModuleExportedProductionNodeInterface {
     	     ...
     } XnModuleExportedProductionNodeInterface;

.CE
Rewrite the end of this declaration to
.CS


     typedef struct XnModuleExportedProductionNodeInterface {
     	     ...
     } ;

.CE
This removes a conflict between this declaration and its forward
declaration in the header file "\fIXnTypes.h\fR".
.PP
When actually using a Kinect the OpenNI framework alone is not
useful. To talk to a Kinect we also have to install the binaries for
the PrimeSense Sensor inside of the device. These can also be found in
the downloads section of the OpenNI website. During development
PrimeSensor version 5.1.0.41 was installed.
.PP
Furthermore it is recommended to install the PrimeSense NITE
binaries, which provide various higher-level analysis
algorithms. These are again found at the OpenNI website. During
development NITE version 1.5.2.23 was installed.
.PP
For those wishing to understand things on a deeper level the
sources of OpenNI and of the sensor are available as well, through the
OpenNI website. Of course. The NITE package however seems to be
closed.
.SH "BUILD & INSTALLATION"
To install KineTcl simply run
.CS


    /path/to/tclsh8.5 /path/to/kinetcl/build.tcl install

.CE
where "\fI/path/to/tclsh8.5\fR" is the tclsh of your Tcl installation, and
"\fI/path/to/kinetcl\fR" the location of the KineTcl sources on your system.
.PP
This builds all packages and then places them in a directory where the
\fBtclsh8.5\fR will find them.
.PP
On Windows you can invoke the file "\fIbuild.tcl\fR" with a
double-click.  This will pop up a small graphical interface for
entering the destination and performing the installation. This
handling of a double-click is restricted to Windows only however.
.PP
On unix the same GUI is acessible by invoking "\fIbuild.tcl\fR" without
any arguments.
.PP
To get help about the methods of "\fIbuild.tcl\fR", and their complete
syntax, invoke  "\fIbuild.tcl\fR" with argument \fBhelp\fR, i.e., like
.CS


    /path/to/tclsh8.5 /path/to/kinetcl/build.tcl help

.CE
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the \fIKineTcl Tracker\fR [http://chiselapp.com/user/andreas_kupries/repository/KineTcl].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
3D vision, Kinect, OpenNI, PrimeSense, computer vision, tracking, volume sensor
.SH CATEGORY
3rd party library binding
.SH COPYRIGHT
.nf
Copyright (c) 2012 Andreas Kupries
Copyright (c) 2012 Documentation, Andreas Kupries

.fi