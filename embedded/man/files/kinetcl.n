'\"
'\" Generated from file '/home/aku/Projects/KineTcl/kinetcl/embedded/man/files/kinetcl.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2012 Andreas Kupries
'\" Copyright (c) 2012 Documentation, Andreas Kupries
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "kinetcl" n 0.1 doc "KineTcl"
.BS
.SH NAME
kinetcl \- KineTcl - API
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBkinetcl  ?0.1?\fR
.sp
\fB::kinetcl estart\fR
.sp
\fB::kinetcl estop\fR
.sp
\fB::kinetcl start\fR
.sp
\fB::kinetcl stop\fR
.sp
\fB::kinetcl waitUpdate\fR
.sp
\fB::kinetcl waitAnyUpdate\fR
.sp
\fB::kinetcl waitNoneUpdate\fR
.sp
\fB::kinetcl waitOneUpdate\fR \fInode\fR
.sp
\fB::kinetcl errorstate\fR
.sp
\fB::kinetcl mirror\fR ?\fIbool\fR?
.sp
\fB::kinetcl base\fR \fBnew\fR
.sp
\fB::kinetcl base\fR \fBcreate\fR \fIobjname\fR
.sp
\fIbaseInstanceCmd\fR \fBcapabilities\fR ?\fB-all\fR?
.sp
\fIbaseInstanceCmd\fR \fBis-capable-of\fR \fIcapability\fR
.sp
\fIbaseInstanceCmd\fR \fBnode-info\fR
.sp
\fIbaseInstanceCmd\fR \fBnode-name\fR
.sp
\fB::kinetcl generator\fR \fBnew\fR
.sp
\fB::kinetcl generator\fR \fBcreate\fR \fIobjname\fR
.sp
\fIgeneratorInstanceCmd\fR \fBstart\fR
.sp
\fIgeneratorInstanceCmd\fR \fBstop\fR
.sp
\fIgeneratorInstanceCmd\fR \fBactive\fR
.sp
\fIgeneratorInstanceCmd\fR \fBupdate\fR
.sp
\fIgeneratorInstanceCmd\fR \fBhasNew\fR
.sp
\fIgeneratorInstanceCmd\fR \fBisNew\fR
.sp
\fIgeneratorInstanceCmd\fR \fBframe\fR
.sp
\fIgeneratorInstanceCmd\fR \fBtime\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-active\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-active\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-newdata\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-newdata\fR
.sp
\fB::kinetcl map\fR \fBnew\fR
.sp
\fB::kinetcl map\fR \fBcreate\fR \fIobjname\fR
.sp
\fImapInstanceCmd\fR \fBbytes-per-pixel\fR
.sp
\fImapInstanceCmd\fR \fBmodes\fR
.sp
\fImapInstanceCmd\fR \fBmode\fR
.sp
\fImapInstanceCmd\fR \fBmode\fR \fIxres\fR \fIyres\fR \fIfps\fR
.sp
\fImapInstanceCmd\fR \fBset-callback-mode\fR \fIcmd\fR...
.sp
\fImapInstanceCmd\fR \fBunset-callback-mode\fR
.sp
\fB::kinetcl depth\fR \fBnew\fR
.sp
\fB::kinetcl depth\fR \fBcreate\fR \fIobjname\fR
.sp
\fIdepthInstanceCmd\fR \fBdestroy\fR
.sp
\fIdepthInstanceCmd\fR \fBmax-depth\fR
.sp
\fIdepthInstanceCmd\fR \fBfov\fR
.sp
\fIdepthInstanceCmd\fR \fBmeta\fR
.sp
\fIdepthInstanceCmd\fR \fBmap\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-depthfov\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-depthfov\fR
.sp
\fB::kinetcl image\fR \fBnew\fR
.sp
\fB::kinetcl image\fR \fBcreate\fR \fIobjname\fR
.sp
\fIimageInstanceCmd\fR \fBdestroy\fR
.sp
\fIimageInstanceCmd\fR \fBformats\fR
.sp
\fIimageInstanceCmd\fR \fBformat\fR ?\fIformat\fR?
.sp
\fIimageInstanceCmd\fR \fBmeta\fR
.sp
\fIimageInstanceCmd\fR \fBmap\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-pixelformat\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-pixelformat\fR
.sp
\fB::kinetcl ir\fR \fBnew\fR
.sp
\fB::kinetcl ir\fR \fBcreate\fR \fIobjname\fR
.sp
\fIirIstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl gesture\fR \fBnew\fR
.sp
\fB::kinetcl gesture\fR \fBcreate\fR \fIobjname\fR
.sp
\fIgestureInstanceCmd\fR \fBdestroy\fR
.sp
\fIgestureInstanceCmd\fR \fBadd-gesture\fR \fIgesture\fR \fIbox\fR
.sp
\fIgestureInstanceCmd\fR \fBremove-gesture\fR \fIgesture\fR
.sp
\fIgestureInstanceCmd\fR \fBis-gesture\fR \fIgesture\fR
.sp
\fIgestureInstanceCmd\fR \fBgesture-has-progress\fR \fIgesture\fR
.sp
\fIgestureInstanceCmd\fR \fBall-gestures\fR
.sp
\fIgestureInstanceCmd\fR \fBactive-gestures\fR
.sp
\fIgestureInstanceCmd\fR \fBset-callback-gestureRecognized\fR \fIcmd\fR...
.sp
\fIgestureInstanceCmd\fR \fBunset-callback-gestureRecognized\fR
.sp
\fIgestureInstanceCmd\fR \fBset-callback-gestureProgress\fR \fIcmd\fR...
.sp
\fIgestureInstanceCmd\fR \fBunset-callback-gestureProgress\fR
.sp
\fIgestureInstanceCmd\fR \fBset-callback-gestureChange\fR \fIcmd\fR...
.sp
\fIgestureInstanceCmd\fR \fBunset-callback-gestureChange\fR
.sp
\fIgestureInstanceCmd\fR \fBset-callback-gestureStageComplete\fR \fIcmd\fR...
.sp
\fIgestureInstanceCmd\fR \fBunset-callback-gestureStageComplete\fR
.sp
\fIgestureInstanceCmd\fR \fBset-callback-gestureStageReadyForNext\fR \fIcmd\fR...
.sp
\fIgestureInstanceCmd\fR \fBunset-callback-gestureStageReadyForNext\fR
.sp
\fB::kinetcl scene\fR
.sp
\fIsceneInstanceCmd\fR \fBdestroy\fR
.sp
\fIsceneInstanceCmd\fR \fBmeta\fR
.sp
\fIsceneInstanceCmd\fR \fBmap\fR
.sp
\fB::kinetcl user\fR \fBnew\fR
.sp
\fB::kinetcl user\fR \fBcreate\fR \fIobjname\fR
.sp
\fIuserInstanceCmd\fR \fBdestroy\fR
.sp
\fIuserInstanceCmd\fR \fBcount\fR
.sp
\fIuserInstanceCmd\fR \fBusers\fR
.sp
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-enter\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-enter\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-exit\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-exit\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-new\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-new\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-lost\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-lost\fR
.sp
\fB::kinetcl hands\fR \fBnew\fR
.sp
\fB::kinetcl hands\fR \fBcreate\fR \fIobjname\fR
.sp
\fIhandsInstanceCmd\fR \fBdestroy\fR
.sp
\fIinstanceCmd\fR \fBset-smoothing\fR \fIfactor\fR
.sp
\fIinstanceCmd\fR \fBstart-tracking\fR \fIpoint\fR
.sp
\fIinstanceCmd\fR \fBstop-tracking\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBstop-tracking-all\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-handCreate\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-handCreate\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-handUpdate\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-handUpdate\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-handDestroy\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-handDestroy\fR
.sp
\fB::kinetcl audio\fR \fBnew\fR
.sp
\fB::kinetcl audio\fR \fBcreate\fR \fIobjname\fR
.sp
\fIaudioInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl recorder\fR \fBnew\fR
.sp
\fB::kinetcl recorder\fR \fBcreate\fR \fIobjname\fR
.sp
\fIrecorderInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl player\fR \fBnew\fR
.sp
\fB::kinetcl player\fR \fBcreate\fR \fIobjname\fR
.sp
\fIplayerInstanceCmd\fR \fBdestroy\fR
.sp
\fIplayerInstanceCmd\fR \fBspeed\fR \fIspeed\fR
.sp
\fIplayerInstanceCmd\fR \fBspeed\fR
.sp
\fIplayerInstanceCmd\fR \fBrepeat\fR \fIbool\fR
.sp
\fIplayerInstanceCmd\fR \fBeof\fR
.sp
\fIplayerInstanceCmd\fR \fBformat\fR
.sp
\fIplayerInstanceCmd\fR \fBnext\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-eof\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-eof\fR
.sp
\fB::kinetcl script\fR \fBnew\fR
.sp
\fB::kinetcl script\fR \fBcreate\fR \fIobjname\fR
.sp
\fIscriptInstanceCmd\fR \fBdestroy\fR
.sp
\fIinstanceCmd\fR \fBsupports-view\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBset-view\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBreset-view\fR
.sp
\fIinstanceCmd\fR \fBusing-view\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBset-callback-viewpoint\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-viewpoint\fR
.sp
\fIinstanceCmd\fR \fBfrequency\fR
.sp
\fIinstanceCmd\fR \fBcrop\fR \fIfrequency\fR
.sp
\fIinstanceCmd\fR \fBset-callback-frequency\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-frequency\fR
.sp
\fIinstanceCmd\fR \fBcrop\fR
.sp
\fIinstanceCmd\fR \fBcrop\fR \fIx\fR \fIy\fR \fIw\fR \fIh\fR
.sp
\fIinstanceCmd\fR \fBuncrop\fR
.sp
\fIinstanceCmd\fR \fBset-callback-cropping\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-cropping\fR
.sp
\fIinstanceCmd\fR \fBcan-sync-with\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBstart-sync-with\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBstop-sync-with\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBsynced-with\fR \fInode\fR
.sp
\fIinstanceCmd\fR \fBset-callback-framesync\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-framesync\fR
.sp
\fIinstanceCmd\fR \fBset-callback-fovEdge\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-fovEdge\fR
.sp
\fIinstanceCmd\fR \fBmirror\fR
.sp
\fIinstanceCmd\fR \fBmirror\fR \fIbool\fR
.sp
\fIinstanceCmd\fR \fBset-callback-mirror\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-mirror\fR
.sp
\fIinstanceCmd\fR \fBposes\fR
.sp
\fIinstanceCmd\fR \fBis-supported\fR \fIpose\fR
.sp
\fIinstanceCmd\fR \fBstart-detection\fR \fIuser\fR \fIpose\fR
.sp
\fIinstanceCmd\fR \fBstop-detection\fR \fIuser\fR \fIpose\fR
.sp
\fIinstanceCmd\fR \fBstop-all-detection\fR \fIuser\fR
.sp
\fIinstanceCmd\fR \fBstatus\fR \fIuser\fR \fIpose\fR
.sp
\fIinstanceCmd\fR \fBset-callback-poseEnter\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-poseEnter\fR
.sp
\fIinstanceCmd\fR \fBset-callback-poseExit\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-poseExit\fR
.sp
\fIinstanceCmd\fR \fBset-callback-poseProgress\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-poseProgress\fR
.sp
\fIinstanceCmd\fR \fBneed-pose\fR
.sp
\fIinstanceCmd\fR \fBis-profile-available\fR \fIprofile\fR
.sp
\fIinstanceCmd\fR \fBset-profile\fR \fIprofile\fR
.sp
\fIinstanceCmd\fR \fBset-smoothing\fR \fIfactor\fR
.sp
\fIinstanceCmd\fR \fBstart-tracking\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBstop-tracking\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBreset-tracking\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBis-tracking\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBis-calibrated\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBis-calibrating\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBrequest-calibration\fR \fIid\fR \fIforce\fR
.sp
\fIinstanceCmd\fR \fBabort-calibration\fR \fIid\fR
.sp
\fIinstanceCmd\fR \fBsave-calibration-file\fR \fIid\fR \fIpath\fR
.sp
\fIinstanceCmd\fR \fBload-calibration-file\fR \fIid\fR \fIpath\fR
.sp
\fIinstanceCmd\fR \fBsave-calibration\fR \fIid\fR \fIslot\fR
.sp
\fIinstanceCmd\fR \fBload-calibration-slot\fR \fIid\fR \fIslot\fR
.sp
\fIinstanceCmd\fR \fBclear-calibration-slot\fR \fIslot\fR
.sp
\fIinstanceCmd\fR \fBis-calibration-slot\fR \fIslot\fR
.sp
\fIinstanceCmd\fR \fBis-joint-available\fR \fIjoint\fR
.sp
\fIinstanceCmd\fR \fBis-joint-active\fR \fIjoint\fR
.sp
\fIinstanceCmd\fR \fBset-joint-active\fR \fIjoint\fR \fIactive\fR
.sp
\fIinstanceCmd\fR \fBactive-joints\fR
.sp
\fIinstanceCmd\fR \fBget-joint\fR \fIuser\fR \fIjoint\fR
.sp
\fIinstanceCmd\fR \fBset-callback-jointConfigChange\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-jointConfigChange\fR
.sp
\fIinstanceCmd\fR \fBset-callback-calibrationStart\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-calibrationStart\fR
.sp
\fIinstanceCmd\fR \fBset-callback-calibrationComplete\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-calibrationComplete\fR
.sp
\fIinstanceCmd\fR \fBset-callback-calibrationProgress\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-calibrationProgress\fR
.sp
\fIinstanceCmd\fR \fBbacklight-compensation\fR
.sp
\fIinstanceCmd\fR \fBbacklight-compensation\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBbacklight-compensation-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-backlightCompensation\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-backlightCompensation\fR
.sp
\fIinstanceCmd\fR \fBbrightness\fR
.sp
\fIinstanceCmd\fR \fBbrightness\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBbrightness-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-brightness\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-brightness\fR
.sp
\fIinstanceCmd\fR \fBcolor-temperature\fR
.sp
\fIinstanceCmd\fR \fBcolor-temperature\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBcolor-temperature-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-colorTemperature\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-colorTemperature\fR
.sp
\fIinstanceCmd\fR \fBcontrast\fR
.sp
\fIinstanceCmd\fR \fBcontrast\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBcontrast-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-contrast\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-contrast\fR
.sp
\fIinstanceCmd\fR \fBexposure\fR
.sp
\fIinstanceCmd\fR \fBexposure\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBexposure-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-exposure\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-exposure\fR
.sp
\fIinstanceCmd\fR \fBfocus\fR
.sp
\fIinstanceCmd\fR \fBfocus\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBfocus-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-focus\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-focus\fR
.sp
\fIinstanceCmd\fR \fBgain\fR
.sp
\fIinstanceCmd\fR \fBgain\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBgain-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-gain\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-gain\fR
.sp
\fIinstanceCmd\fR \fBgamma\fR
.sp
\fIinstanceCmd\fR \fBgamma\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBgamma-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-gamma\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-gamma\fR
.sp
\fIinstanceCmd\fR \fBhue\fR
.sp
\fIinstanceCmd\fR \fBhue\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBhue-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-hue\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-hue\fR
.sp
\fIinstanceCmd\fR \fBiris\fR
.sp
\fIinstanceCmd\fR \fBiris\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBiris-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-iris\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-iris\fR
.sp
\fIinstanceCmd\fR \fBlowlight-compensation\fR
.sp
\fIinstanceCmd\fR \fBlowlight-compensation\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBlowlight-compensation-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-lowlightCompensation\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-lowlightCompensation\fR
.sp
\fIinstanceCmd\fR \fBpan\fR
.sp
\fIinstanceCmd\fR \fBpan\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBpan-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-pan\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-pan\fR
.sp
\fIinstanceCmd\fR \fBroll\fR
.sp
\fIinstanceCmd\fR \fBroll\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBroll-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-roll\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-roll\fR
.sp
\fIinstanceCmd\fR \fBsaturation\fR
.sp
\fIinstanceCmd\fR \fBsaturation\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBsaturation-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-saturation\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-saturation\fR
.sp
\fIinstanceCmd\fR \fBsharpness\fR
.sp
\fIinstanceCmd\fR \fBsharpness\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBsharpness-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-sharpness\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-sharpness\fR
.sp
\fIinstanceCmd\fR \fBtilt\fR
.sp
\fIinstanceCmd\fR \fBtilt\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBtilt-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-tilt\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-tilt\fR
.sp
\fIinstanceCmd\fR \fBzoom\fR
.sp
\fIinstanceCmd\fR \fBzoom\fR \fIvalue\fR
.sp
\fIinstanceCmd\fR \fBzoom-range\fR
.sp
\fIinstanceCmd\fR \fBset-callback-zoom\fR \fIcmd\fR...
.sp
\fIinstanceCmd\fR \fBunset-callback-zoom\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to KineTcl, a binding of the OpenNI framework providing
Tcl with access to MS Kinect (tm), and related sensor systems.
.SH API
.SH "GLOBAL COMMANDS"
This sections documents the global commands in the
\fB::kinetcl\fR namespace and ensemble.
.TP
\fB::kinetcl estart\fR
This command deactivates the event deferal, aka lockout mode.
Any OpenNI/kinetcl events which were prevented from entering Tcl's
event queue are now moved into it.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl estop\fR
This command activates the event deferal, aka lockout mode.
Any OpenNI/kinetcl events occuring while this mode is active are
prevented from entering Tcl's event queue until the next invokation of
\fB::kinetcl estop\fR.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl start\fR
This command activates data processing and generation in all known
generator nodes.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl stop\fR
This command deactivates data processing and generation in all known
generator nodes.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl waitUpdate\fR
This command waits for all generator nodes to have new data and then
updates them all.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl waitAnyUpdate\fR
This command waits for any of the generator nodes to have new data and
then updates them all.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl waitNoneUpdate\fR
This command updates all generator nodes, without any waiting.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl waitOneUpdate\fR \fInode\fR
This command waits for the specified generator \fInode\fR to have new
data and then updates all nodes.
.sp
The result of the command is the empty string.
.TP
\fB::kinetcl errorstate\fR
This command returns the global error state of OpenNI as string.
.TP
\fB::kinetcl mirror\fR ?\fIbool\fR?
This command returns the current value of the global mirror flag.
If the argument is specified the global mirror flag is set to its
value, and all existing nodes supporting mirroring are reconfigured to
reflect the new state.
.PP
.SH BASE
This sections documents the class \fB::kinetcl base\fR, the (abstract) base
class for all OpenNI production nodes.
.PP
They may have the following capabilities:
.IP [1]
\fBBacklight Compensation\fR
.IP [2]
\fBBrightness\fR
.IP [3]
\fBColor Temperature\fR
.IP [4]
\fBContrast\fR
.IP [5]
\fBExposure\fR
.IP [6]
\fBFocus\fR
.IP [7]
\fBGain\fR
.IP [8]
\fBGamma\fR
.IP [9]
\fBHue\fR
.IP [10]
\fBIris\fR
.IP [11]
\fBLowlight compensation\fR
.IP [12]
\fBPan\fR
.IP [13]
\fBRoll\fR
.IP [14]
\fBSaturation\fR
.IP [15]
\fBSharpness\fR
.IP [16]
\fBTilt\fR
.IP [17]
\fBZoom\fR
.PP
.SS "CLASS API"
.TP
\fB::kinetcl base\fR \fBnew\fR
.TP
\fB::kinetcl base\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the base.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIbaseInstanceCmd\fR \fBcapabilities\fR ?\fB-all\fR?
This method returns the capabilities of the instance, or, if option
\fB-all\fR was specified, the set of all possible capabilities.
.sp
The result is a list containing the names of the capabilities.
.TP
\fIbaseInstanceCmd\fR \fBis-capable-of\fR \fIcapability\fR
This method checks if the named capability is supported by the
instance or not.
.sp
The result is a boolean value, \fBtrue\fR if the capability
is supported, and \fBfalse\fR else.
.TP
\fIbaseInstanceCmd\fR \fBnode-info\fR
This method returns a dictionary containing OpenNI's description of the
node. They keys of the dictinary, and the associated values are
.RS
.TP
\fBtype\fR
The OpenNI type of the node, which is either one of
.RS
.IP \(bu
invalid
.IP \(bu
device
.IP \(bu
depth
.IP \(bu
image
.IP \(bu
audio
.IP \(bu
ir
.IP \(bu
user
.IP \(bu
recorder
.IP \(bu
player
.IP \(bu
gesture
.IP \(bu
scene
.IP \(bu
hands
.IP \(bu
codec
.IP \(bu
production
.IP \(bu
generator
.IP \(bu
map
.IP \(bu
script
.RE
.IP
or an integer number. The latter is used for unknown custom types
OpenNI has no name for.
.TP
\fBvendor\fR
The name of the vendor supplying the library which implements the
node.
.TP
\fBname\fR
The name OpenNI has given to the node. This is the same as returned by
method \fBnode-name\fR.
.TP
\fBversion\fR
The version of the library implementing the node (see also the key
\fBvendor\fR) as a 4-element list containing major, minor version
number, maintenance id, and build number, in this order.
.TP
\fBcreate\fR
The node's creation detail information.
.RE
.TP
\fIbaseInstanceCmd\fR \fBnode-name\fR
This method returns a string holding the OpenNI name of the node.
.PP
.SH GENERATOR
This sections documents the class \fB::kinetcl generator\fR, the (abstract) base
class for all OpenNI generator nodes.
.PP
This class inherits from \fB::kinetcl base\fR. See section
\fBBase\fR.
.PP
They may have the following capabilities:
.IP [1]
\fBAlternative Viewpoint\fR
.IP [2]
\fBFrame Synchronization\fR
.IP [3]
\fBMirror\fR
.PP
.SS "CLASS API"
.TP
\fB::kinetcl generator\fR \fBnew\fR
.TP
\fB::kinetcl generator\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the generator.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgeneratorInstanceCmd\fR \fBstart\fR
This method causes the instance to start generating output. It implies
the activation of all dependencies as well.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBstop\fR
This method causes the instance to stop generating output.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBactive\fR
This method tests if the instance is generating output.
.sp
The result of the method is a boolean value, \fBtrue\fR if the
instance is generating output, and \fBfalse\fR else.
.TP
\fIgeneratorInstanceCmd\fR \fBupdate\fR
This method causes the instance to update its output to the newest
available. If no new output was available the method blocks until this
happens.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBhasNew\fR
This method tests if the instance has new output available it could be
updated to.  I.e. it checks if the method \fBupdate\fR would block
or not.
.sp
The result of the method is a boolean value, \fBtrue\fR if
the instance has new data (i.e. \fBupdate\fR would not block), and
\fBfalse\fR else.
.TP
\fIgeneratorInstanceCmd\fR \fBisNew\fR
This method tests if the instance's current input frame is new,
i.e. unchanged since the last call to method \fBupdate\fR.
.sp
The result of the method is a boolean value, \fBtrue\fR if
the instance if the current frame is still new, and \fBfalse\fR
else.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBframe\fR
This method returns the id of the input frame currently handled by the
instance.
.sp
The result of the method is an integer number.
.TP
\fIgeneratorInstanceCmd\fR \fBtime\fR
This method returns the time of the input frame currently handled by
the instance, in microseconds.
.sp
The result of the method is an integer number.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-active\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-active\fR
These methods define and remove a callback responding to activity
events, i.e. the instance starting and stopping the generation of
output.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "active", in this order.
.sp
\fINote\fR that the callback is not told the actual state of
the instance. If this information is required then it is the
callback's responsibility to query the state, using the interogatory
method \fBactive\fR.
.sp
The result of the methods is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-newdata\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-newdata\fR
These methods define and remove a callback responding to data
events, i.e. the instance having new output available.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "newdata", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "MAP GENERATOR"
This sections documents the class \fB::kinetcl map\fR, the (abstract) base
class for all OpenNI map generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
They may have the following capabilities:
.IP [1]
\fBAnti-Flicker\fR
.IP [2]
\fBCropping\fR
.PP
.SS "CLASS API"
.TP
\fB::kinetcl map\fR \fBnew\fR
.TP
\fB::kinetcl map\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the map generator.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fImapInstanceCmd\fR \fBbytes-per-pixel\fR
This method returns the number of bytes per pixel in the map.
.TP
\fImapInstanceCmd\fR \fBmodes\fR
This method returns the map output modes supported by the instance.
.sp
The result of the method is a list of modes. Each mode is a
3-element list reporting the x- and y-resolution of the map in pixels,
and the associated frame rate in frames per second, in this order. All
elements are integer numbers.
.TP
\fImapInstanceCmd\fR \fBmode\fR
This form of the method reports the currently set map output mode.
.sp
The result of the method is a 3-element list reporting the x-
and y-resolution of the map in pixels, and the associated frame rate
in frames per second, in this order. All elements are integer numbers.
.TP
\fImapInstanceCmd\fR \fBmode\fR \fIxres\fR \fIyres\fR \fIfps\fR
This form of the method changes the map output mode to the specified
resolution and frame rate. The method throws an error if the
combination is not supported by the instance.
.sp
The result of the method is an empty string.
.TP
\fImapInstanceCmd\fR \fBset-callback-mode\fR \fIcmd\fR...
.TP
\fImapInstanceCmd\fR \fBunset-callback-mode\fR
These methods define and remove a callback responding to mode change
events, i.e. the instance changing the its output mode.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "mode", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "DEPTH GENERATOR"
This sections documents the class \fB::kinetcl generator\fR, the
concrete class for all OpenNI depth generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
A depth generator is a generator providing depth maps,
i.e. images where each pixel value describes the distance of the pixel
from the sensor.
.SS "CLASS API"
.TP
\fB::kinetcl depth\fR \fBnew\fR
.TP
\fB::kinetcl depth\fR \fBcreate\fR \fIobjname\fR
This command creates a new depth generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIdepthInstanceCmd\fR \fBdestroy\fR
This method destroys the depth generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIdepthInstanceCmd\fR \fBmax-depth\fR
This method returns the max depth the node is able to generate. The
result is an integer number.
.TP
\fIdepthInstanceCmd\fR \fBfov\fR
This method returns the field of view the node is able to generate, in
radians. The result is a 2-element list containing the horizontal and
vertical fields of view, in this order.
.TP
\fIdepthInstanceCmd\fR \fBmeta\fR
This method returns a dictionary holding information about the depth
maps produced by the node. The keys found in this dictionary, and the
associated values are:
.RS
.TP
\fBmap\fR
The value is a dictionary holding information about the map produced
by the node. The keys found in this dictionary, and the associated
values are:
.RS
.TP
\fBformat\fR
The pixel format of the depth maps produced by the node.
The possible values are:
.RS
.TP
\fBrgb24\fR
3 bytes/pixel red/green/blue.
.TP
\fByuv422\fR
Lumincance/2-Chroma, chroma in reduced horizontal resolution.
.TP
\fBgrey8\fR
1 byte/pixel, 256 grey levels.
.TP
\fBgrey16\fR
2 byte/pixel, 65536 grey levels, depths, or labels.
.TP
\fBmjpeg\fR
Motion JPEG compressed image.
.RE
.sp
The formats \fByuv422\fR and \fBmjpeg\fR are not supported
by \fBkinetcl\fR.
.TP
\fBfps\fR
The frame rate of the node, in frames per second.
.TP
\fBfullres\fR
The full resolution of the produced depth maps. The value is a
2-element list containing the horizontal and vertical resolution in
pixels, in this order.
.TP
\fBoffset\fR
The location of the produced depth map within the full depth map. The
value is a 2-element list containing the horizontal and vertical
position in pixels, in this order.
This can differ from \fB{0 0}\fR if and only if cropping is
active.
.TP
\fBoutput\fR
The value is a dictionary holding information about the output
produced by the node. The keys found in this dictionary, and the
associated values are:
.RS
.TP
\fBframe\fR
The id of the current frame.
.TP
\fBnew\fR
The \fBisNew\fR flag of the current frame.
.TP
\fBsize\fR
The size of the frame, in bytes. Together with the resolution of the
frame we can compute the number of bytes per pixel in the map.
.TP
\fBtime\fR
The time-code of the current frame.
.RE
.TP
\fBres\fR
The current resolution of the produced depth maps. This may be less
than the full resolution (see above), if cropping is active. The
value is a 2-element list containing the horizontal and vertical
resolution in pixels, in this order.
.RE
.TP
\fBmax-depth\fR
The max depth the node is able to generate. An integer number.
This is the same value as returned by method \fBmax-depth\fR.
.RE
.IP
Notes:
.sp
Depth maps are in pixel format \fBgrey16\fR.
.TP
\fIdepthInstanceCmd\fR \fBmap\fR
This method returns a \fBcrimp\fR image of type \fBgrey16\fR
where the value of each pixel represents the distance of the pixel
from the sensor.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-depthfov\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-depthfov\fR
These methods define and remove a callback responding to changes in
the field of view of the node.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "depthfov", in this order.
.sp
\fINote\fR that the callback is not told the actual state of
the instance. If this information is required then it is the
callback's responsibility to query the state, using the interogatory
method \fBfov\fR.
.sp
The result of the methods is an empty string.
.PP
.SH "IMAGE GENERATOR"
This sections documents the class \fB::kinetcl image\fR, the
concrete class for all OpenNI image generator nodes.
.PP
This class inherits from \fB::kinetcl map\fR and its
superclasses. See section \fBMap Generator\fR.
.PP
An image generator is a map generator providing plain images,
where each pixel value describes the color (or luminance) of the pixel.
.SS "CLASS API"
.TP
\fB::kinetcl image\fR \fBnew\fR
.TP
\fB::kinetcl image\fR \fBcreate\fR \fIobjname\fR
This command creates a new image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIimageInstanceCmd\fR \fBdestroy\fR
This method destroys the image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIimageInstanceCmd\fR \fBformats\fR
This method returns a list of the pixel formats supported by the node.
.sp
For the list of possible pixel formats see below, under method
\fBmeta\fR.
.TP
\fIimageInstanceCmd\fR \fBformat\fR ?\fIformat\fR?
This method returns the name of the currently active pixel format.
If the argument \fIformat\fR is present the node is reconfigured to
report the images in the specified format.
.sp
For the list of possible pixel formats see below, under method
\fBmeta\fR.
.TP
\fIimageInstanceCmd\fR \fBmeta\fR
This method returns a dictionary holding information about the image
maps produced by the node. The keys found in this dictionary, and the
associated values are:
.RS
.TP
\fBmap\fR
The value is a dictionary holding information about the map produced
by the node. The keys found in this dictionary, and the associated
values are:
.RS
.TP
\fBformat\fR
The pixel format of the depth maps produced by the node.
The possible values are:
.RS
.TP
\fBrgb24\fR
3 bytes/pixel red/green/blue.
.TP
\fByuv422\fR
Lumincance/2-Chroma, chroma in reduced horizontal resolution.
.TP
\fBgrey8\fR
1 byte/pixel, 256 grey levels.
.TP
\fBgrey16\fR
2 byte/pixel, 65536 grey levels, depths, or labels.
.TP
\fBmjpeg\fR
Motion JPEG compressed image.
.RE
.sp
The formats \fByuv422\fR and \fBmjpeg\fR are not supported
by \fBkinetcl\fR.
.TP
\fBfps\fR
The frame rate of the node, in frames per second.
.TP
\fBfullres\fR
The full resolution of the produced depth maps. The value is a
2-element list containing the horizontal and vertical resolution in
pixels, in this order.
.TP
\fBoffset\fR
The location of the produced depth map within the full depth map. The
value is a 2-element list containing the horizontal and vertical
position in pixels, in this order.
This can differ from \fB{0 0}\fR if and only if cropping is
active.
.TP
\fBoutput\fR
The value is a dictionary holding information about the output
produced by the node. The keys found in this dictionary, and the
associated values are:
.RS
.TP
\fBframe\fR
The id of the current frame.
.TP
\fBnew\fR
The \fBisNew\fR flag of the current frame.
.TP
\fBsize\fR
The size of the frame, in bytes. Together with the resolution of the
frame we can compute the number of bytes per pixel in the map.
.TP
\fBtime\fR
The time-code of the current frame.
.RE
.TP
\fBres\fR
The current resolution of the produced depth maps. This may be less
than the full resolution (see above), if cropping is active. The
value is a 2-element list containing the horizontal and vertical
resolution in pixels, in this order.
.RE
.RE
.IP
Notes:
.sp
Image maps are usually in pixel format \fBrgb24\fR.
.TP
\fIimageInstanceCmd\fR \fBmap\fR
This method returns a \fBcrimp\fR image containing the current
image map. The crimp type of the image depends on the currently active
pixel format:
.RS
.TP
\fBrgb24\fR
--> \fBrgb\fR
.TP
\fBgrey8\fR
--> \fBgrey8\fR
.TP
\fBgrey16\fR
--> \fBgrey16\fR
.RE
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-pixelformat\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-pixelformat\fR
These methods define and remove a callback responding to changes in
the active pixel format of the node.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "pixelformat", in this order.
.sp
\fINote\fR that the callback is not told the actual state of
the instance. If this information is required then it is the
callback's responsibility to query the state, using the interogatory
method \fBformat\fR.
.sp
The result of the methods is an empty string.
.PP
.SH "IR GENERATOR"
This sections documents the class \fB::kinetcl ir\fR, the
concrete class for all OpenNI IR image generator nodes.
.PP
This class inherits from \fB::kinetcl map\fR and its
superclasses. See section \fBMap Generator\fR.
.PP
An IR image generator is a map generator providing infrared
images.
.SS "CLASS API"
.TP
\fB::kinetcl ir\fR \fBnew\fR
.TP
\fB::kinetcl ir\fR \fBcreate\fR \fIobjname\fR
This command creates a new ir image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIirIstanceCmd\fR \fBdestroy\fR
This method destroys the ir image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "GESTURE GENERATOR"
This sections documents the class \fB::kinetcl gesture\fR, the
concrete class for all OpenNI gesture generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
A genestur generator identifies and tracks gestures performed
by the users within the field of view of the sensor.
.SS "CLASS API"
.TP
\fB::kinetcl gesture\fR \fBnew\fR
.TP
\fB::kinetcl gesture\fR \fBcreate\fR \fIobjname\fR
This command creates a new gesture generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgestureInstanceCmd\fR \fBdestroy\fR
This method destroys the gesture generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIgestureInstanceCmd\fR \fBadd-gesture\fR \fIgesture\fR \fIbox\fR
This method activates the gesture, i.e. causes the instance to start
looking for it in the input.
.sp
The \fIbox\fR describes the area where to look for it, in
real-world coordinates. It is a 2-element list of 3-element lists of
x-, y-, and z-coordinates. The 1st 3D coordinate describes the
left-bottom-near corner of the box, whereas the 2nd describes the
right-top-far corner.
.sp
The result of the method is the empty string.
.TP
\fIgestureInstanceCmd\fR \fBremove-gesture\fR \fIgesture\fR
This method deactivates the gesture, i.e. causes the instance to stop
looking for it in the input.
.sp
The result of the method is the empty string.
.TP
\fIgestureInstanceCmd\fR \fBis-gesture\fR \fIgesture\fR
This method tests if the named \fIgesture\fR is supported by the instance.
.sp
The result is a boolean value, \fBtrue\fR if the gesture is
supported, and \fBfalse\fR else.
.TP
\fIgestureInstanceCmd\fR \fBgesture-has-progress\fR \fIgesture\fR
This method tests if the named \fIgesture\fR supports progess
reporting during recognition.
.sp
The result is a boolean value, \fBtrue\fR if the gesture
supports progress reporting, and \fBfalse\fR else.
.TP
\fIgestureInstanceCmd\fR \fBall-gestures\fR
This method returns a list containing the names of all gestures
supported by the instance.
.TP
\fIgestureInstanceCmd\fR \fBactive-gestures\fR
This method returns a list containing the names of all gestures
that are currently active.
.TP
\fIgestureInstanceCmd\fR \fBset-callback-gestureRecognized\fR \fIcmd\fR...
.TP
\fIgestureInstanceCmd\fR \fBunset-callback-gestureRecognized\fR
These methods define and remove a callback responding to gesture
recognition events.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "gestureRecognized", the name of the recognized gesture, the
3D coordinates of the location where the gesture was recognized, and
the location of the hand which performed the gesture at the end of the
gesture, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgestureInstanceCmd\fR \fBset-callback-gestureProgress\fR \fIcmd\fR...
.TP
\fIgestureInstanceCmd\fR \fBunset-callback-gestureProgress\fR
These methods define and remove a callback responding to gesture
progress events.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "gestureProgress", the name of the gesture progressing, the
current 3D coordinates of the hand performing the gesture, and the
percentage of the gesture already performed, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgestureInstanceCmd\fR \fBset-callback-gestureChange\fR \fIcmd\fR...
.TP
\fIgestureInstanceCmd\fR \fBunset-callback-gestureChange\fR
These methods define and remove a callback responding to gesture
change events, i.e when gestures are (de)activated.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "gestureChange", in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgestureInstanceCmd\fR \fBset-callback-gestureStageComplete\fR \fIcmd\fR...
.TP
\fIgestureInstanceCmd\fR \fBunset-callback-gestureStageComplete\fR
These methods define and remove a callback responding to gesture
stage completion events.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "gestureStageComplete", the name of the gesture which
complete one of its stages, and the current 3D coordinates of the hand
performing the gesture, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgestureInstanceCmd\fR \fBset-callback-gestureStageReadyForNext\fR \fIcmd\fR...
.TP
\fIgestureInstanceCmd\fR \fBunset-callback-gestureStageReadyForNext\fR
These methods define and remove a callback responding to gesture
stage readiness events.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "gestureStageReadyForNext", the name of the gesture which is
ready for the recognition of the next of its stages, and the current
3D coordinates of the hand performing the gesture, in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "SCENE ANALYZER"
This sections documents the class \fB::kinetcl scene\fR, the concrete
class for all OpenNI scene analyzer nodes.
.PP
This class inherits from \fB::kinetcl map\fR and its
superclasses. See section \fBMap Generator\fR.
.PP
A scene analyzer segments a scene, identifying the floor and
other connected areas (i.e. users) in the view of the sensor.
.SS "CLASS API"
.TP
\fB::kinetcl scene\fR
This command creates a new scene analyzer instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIsceneInstanceCmd\fR \fBdestroy\fR
This method destroys the scene analyzer instance and releases all
associated resources, including the instance command.  Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIsceneInstanceCmd\fR \fBmeta\fR
This method returns a dictionary holding information about the scene
segmentation produced by the node. The keys found in this dictionary,
and the associated values are:
.RS
.TP
\fBmap\fR
The value is a dictionary holding information about the map produced
by the node. The keys found in this dictionary, and the associated
values are:
.RS
.TP
\fBformat\fR
The pixel format of the depth maps produced by the node.
The possible values are:
.RS
.TP
\fBrgb24\fR
3 bytes/pixel red/green/blue.
.TP
\fByuv422\fR
Lumincance/2-Chroma, chroma in reduced horizontal resolution.
.TP
\fBgrey8\fR
1 byte/pixel, 256 grey levels.
.TP
\fBgrey16\fR
2 byte/pixel, 65536 grey levels, depths, or labels.
.TP
\fBmjpeg\fR
Motion JPEG compressed image.
.RE
.sp
The formats \fByuv422\fR and \fBmjpeg\fR are not supported
by \fBkinetcl\fR.
.TP
\fBfps\fR
The frame rate of the node, in frames per second.
.TP
\fBfullres\fR
The full resolution of the produced depth maps. The value is a
2-element list containing the horizontal and vertical resolution in
pixels, in this order.
.TP
\fBoffset\fR
The location of the produced depth map within the full depth map. The
value is a 2-element list containing the horizontal and vertical
position in pixels, in this order.
This can differ from \fB{0 0}\fR if and only if cropping is
active.
.TP
\fBoutput\fR
The value is a dictionary holding information about the output
produced by the node. The keys found in this dictionary, and the
associated values are:
.RS
.TP
\fBframe\fR
The id of the current frame.
.TP
\fBnew\fR
The \fBisNew\fR flag of the current frame.
.TP
\fBsize\fR
The size of the frame, in bytes. Together with the resolution of the
frame we can compute the number of bytes per pixel in the map.
.TP
\fBtime\fR
The time-code of the current frame.
.RE
.TP
\fBres\fR
The current resolution of the produced depth maps. This may be less
than the full resolution (see above), if cropping is active. The
value is a 2-element list containing the horizontal and vertical
resolution in pixels, in this order.
.RE
.RE
.IP
Notes:
.sp
Scene segmentations are in pixel format \fBgrey16\fR.
.TP
\fIsceneInstanceCmd\fR \fBmap\fR
This method returns a \fBcrimp\fR image of type \fBgrey16\fR
containing the current scene segmentation. Each pixel is labeled with
the id of the user it belongs to, or \fB0\fR if it is background.
.PP
.SH "USER GENERATOR"
This sections documents the class \fB::kinetcl user\fR, the concrete
class for all OpenNI user generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
A user generator identifies and tracks users within the field
of view of the sensor.
.PP
They may have the following capabilities:
.IP [1]
\fBInstance Pose Detection API\fR
.IP [2]
\fBInstance Hand Touching FOV Edge API\fR
.IP [3]
\fBInstance Skeleton/Joint API\fR
.PP
.SS "CLASS API"
.TP
\fB::kinetcl user\fR \fBnew\fR
.TP
\fB::kinetcl user\fR \fBcreate\fR \fIobjname\fR
This command creates a new user generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIuserInstanceCmd\fR \fBdestroy\fR
This method destroys the user generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIuserInstanceCmd\fR \fBcount\fR
This method returns the number of users currently tracked by the
user generator instance.
.TP
\fIuserInstanceCmd\fR \fBusers\fR
This method returns a list containing the ids of the users currently
tracked by the user generator instance.
.TP
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
This method returns the center location for the user specified by its
id, as a 3-element list, i.e. vector, of floating point coordinates.
The coordinates are specified in the order of X, Y, and Z.
.sp
The method will throw an error if the user id is not valid.
.TP
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
This method returns a \fBcrimp\fR image of type \fBgrey16\fR
where all pixels representing the user are set to the user's id, and
everything else set to \fB0\fR.
.TP
\fIuserInstanceCmd\fR \fBset-callback-enter\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-enter\fR
These methods define and remove a callback responding to re-entry
events, i.e. a user re-entering the scene after exiting it.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "enter", and the (numerical) id of the user
re-entering, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-exit\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-exit\fR
These methods define and remove a callback responding to exit events,
i.e. a user exiting the scene.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "exit", and the (numerical) id of the user exiting,
in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-new\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-new\fR
These methods define and remove a callback responding to "new user"
events, i.e. when a new user is identified.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "new", and the (numerical) id of the newly
identified user, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-lost\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-lost\fR
These methods define and remove a callback responding to "lost user"
events, i.e. when a user is no longer identified.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "lost", and the (numerical) id of the lost user, in
this order.
.sp
The result of the methods is an empty string.
.PP
.SH "HANDS GENERATOR"
This sections documents the class \fB::kinetcl hands\fR, the concrete
class for all OpenNI hand generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
A hand generator identifies and tracks the hands of the users
within the field of view of the sensor.
.SS "CLASS API"
.TP
\fB::kinetcl hands\fR \fBnew\fR
.TP
\fB::kinetcl hands\fR \fBcreate\fR \fIobjname\fR
This command creates a new hands generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIhandsInstanceCmd\fR \fBdestroy\fR
This method destroys the hands generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIinstanceCmd\fR \fBset-smoothing\fR \fIfactor\fR
This method sets the smoothing \fIfactor\fR for hand tracking, a
floating point value.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstart-tracking\fR \fIpoint\fR
This method activates the tracking of a hand at the \fIpoint\fR.
The point must be a 3-element list containing the X, Y, and Z
coordinates, in this order.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstop-tracking\fR \fIid\fR
This method stops tracking of the hand(s) for the user specified by
the \fIid\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstop-tracking-all\fR
This method stops the tracking of all hands known to the node.
.sp
The result of the method is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-handCreate\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-handCreate\fR
These methods define and remove a callback responding to hand creation
events, i.e. the node starting to track an additional hand.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "handCreate", the id of the user the hand belongs to, the
location of the hand, and a timestamp, in this order.
.sp
The location is a 3-element list containing the X, Y, and Z
coordinates of the hand, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-handUpdate\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-handUpdate\fR
These methods define and remove a callback responding to hand update
events, i.e. when a tracked hand moves to a new location.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "handUpdate", the id of the user the hand belongs to, the new
location of the hand, and a timestamp, in this order.
.sp
The location is a 3-element list containing the X, Y, and Z
coordinates of the hand, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-handDestroy\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-handDestroy\fR
These methods define and remove a callback responding to hand
destruction events, i.e. when a tracked hand disappears.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "handDestroy", the id of the user the destroyed hand belonged
to, and a timestamp, in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "AUDIO GENERATOR"
This sections documents the class \fB::kinetcl audio\fR, the concrete
class for all OpenNI audio generator nodes.
.PP
This class inherits from \fB::kinetcl generator\fR and its
superclasses. See section \fBGenerator\fR.
.PP
An audio generator provides access to the stream of sound data
from the sensor.
.SS "CLASS API"
.TP
\fB::kinetcl audio\fR \fBnew\fR
.TP
\fB::kinetcl audio\fR \fBcreate\fR \fIobjname\fR
This command creates a new audio generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIaudioInstanceCmd\fR \fBdestroy\fR
This method destroys the audio generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "RECORDER NODE"
This sections documents the class \fB::kinetcl recorder\fR, the
concrete class for all OpenNI recorder nodes.
.PP
This class inherits from \fB::kinetcl base\fR. See section
\fBBase\fR.
.PP
A recorder watches the stream of sensor information in the
system and serializes it to a file. A player node may in the future
read this information and replay it.
.SS "CLASS API"
.TP
\fB::kinetcl recorder\fR \fBnew\fR
.TP
\fB::kinetcl recorder\fR \fBcreate\fR \fIobjname\fR
This command creates a new recorder instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIrecorderInstanceCmd\fR \fBdestroy\fR
This method destroys the recorder instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "PLAYER NODE"
This sections documents the class \fB::kinetcl player\fR, the
concrete class for all OpenNI player nodes.
.PP
This class inherits from \fB::kinetcl base\fR. See section
\fBBase\fR.
.PP
A player read a stream of sensor information from a file and
injects it into the system, faking the existence of a sensor.
.SS "CLASS API"
.TP
\fB::kinetcl player\fR \fBnew\fR
.TP
\fB::kinetcl player\fR \fBcreate\fR \fIobjname\fR
This command creates a new player instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIplayerInstanceCmd\fR \fBdestroy\fR
This method destroys the player instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBspeed\fR \fIspeed\fR
This method sets the speed of playback as a ratio of the time passed
in the recording. I.e. a speed of \fB1\fR implies playback at the
same frame/rate as recorded, whereas a speed < 1 causes slow-motion,
and a speed > 1 fast-forward.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBspeed\fR
This method returns the speed of playback, as a ratio of the time
passed in the recording.
.sp
The result of the method is a floating point number.
.TP
\fIplayerInstanceCmd\fR \fBrepeat\fR \fIbool\fR
This method activates or deactivates repeating mode. If repeating is
activated (\fIbool\fR is \fBtrue\fR) the player will automatically
rewind to the beginning of the recording when reaching the end, and
continue playing.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBeof\fR
This method tests if the player has reached the end of the recording,
or not. Note that this is never \fBtrue\fR when the player is in
repeating mode, however "eof" events are still triggered.
.sp
The result of the method is boolean value, \fBtrue\fR if the
player is at the end of the recording, and \fBfalse\fR else.
.TP
\fIplayerInstanceCmd\fR \fBformat\fR
This method returns the name of the format supported by the player instance.
.TP
\fIplayerInstanceCmd\fR \fBnext\fR
This method causes the player to explicitly advance to the next frame.
.sp
The result of the method is the empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-eof\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-eof\fR
These methods define and remove a callback responding to "eof" events,
i.e. when the end of the recording was reached.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, and the word "eof", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "SCRIPT NODE"
This sections documents the class \fB::kinetcl script\fR, the
concrete class for all OpenNI recorder nodes.
.PP
This class inherits from \fB::kinetcl base\fR. See section
\fBBase\fR.
.PP
A script node can run scripts (sic!), and manages the life-time
of all nodes created by such.
.SS "CLASS API"
.TP
\fB::kinetcl script\fR \fBnew\fR
.TP
\fB::kinetcl script\fR \fBcreate\fR \fIobjname\fR
This command creates a new script instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIscriptInstanceCmd\fR \fBdestroy\fR
This method destroys the script instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH CAPABILITIES
This sections documents the various capabilities a production node may have.
The main classes will all refer to the sub-sections found here.
.SS "ALTERNATIVE VIEWPOINT"
Should a production node support the alternate viewpoint API the
following methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name
\fBalternative-viewpoint\fR.
.TP
\fIinstanceCmd\fR \fBsupports-view\fR \fInode\fR
This method tests if the instance is able to use the viewpoint of the
the other production \fInode\fR. This argument is the object command
of another kinetcl instance.
.sp
The result is a boolean value, \fBtrue\fR if the viewpoint of
\fInode\fR is supported, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBset-view\fR \fInode\fR
This method sets the instance's viewpoint to the view of the other
production \fInode\fR. This argument is the object command of another
kinetcl instance.
.sp
The result of the method is an empty string. An error is
thrown if the \fInode\fR's viewpoint is not supported.
.TP
\fIinstanceCmd\fR \fBreset-view\fR
This method sets the instance's viewpoint back to its own viewpoint.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBusing-view\fR \fInode\fR
This method tests if the instance is currently using the viewpoint of
the other production \fInode\fR. This argument is the object command
of another kinetcl instance.
.sp
The result is a boolean value, \fBtrue\fR if the viewpoint of
\fInode\fR is in use, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBset-callback-viewpoint\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-viewpoint\fR
These methods define and remove a callback responding to viewpoint
configuration changes, i.e. when the viewpoint of a node is changed.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "viewpoint", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS ANTI-FLICKER
Should a production node support the anti-flicker API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBantiflicker\fR.
.TP
\fIinstanceCmd\fR \fBfrequency\fR
In this form the method returns the current anti-flicker settings.
.sp
The result is either the string \fBoff\fR, or the powerline
frequency the node is synchronized to.
.TP
\fIinstanceCmd\fR \fBcrop\fR \fIfrequency\fR
In this form the method changes the anit-flicker settings.
The allowed values for \fIfrequency\fR are \fB50\fR, \fB60\fR, and
\fBoff\fR. The latter disables the anti-flicker system.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-frequency\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-frequency\fR
These methods define and remove a callback responding to anti-flicker
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "frequency", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS CROPPING
Should a production node support the cropping API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBcropping\fR.
.TP
\fIinstanceCmd\fR \fBcrop\fR
In this form the method returns the current crop settings.
.sp
The result is a list of 4-elements containing the x- and
y-offset of the crop rectangle, and its horizontal and vertical
dimensions, in this order.
.TP
\fIinstanceCmd\fR \fBcrop\fR \fIx\fR \fIy\fR \fIw\fR \fIh\fR
In this form the method sets the crop rectangle to the specified x-
and y-offset of the crop rectangle, and its horizontal and vertical
dimensions
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBuncrop\fR
This method deactivates any croppping set on the instance.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-cropping\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-cropping\fR
These methods define and remove a callback responding to cropping
configuration changes, i.e. when the instance's crop settings change.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "cropping", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "FRAME SYNCHRONIZATION"
Should a production node support the frame synchronization API the
following methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBframesync\fR.
.TP
\fIinstanceCmd\fR \fBcan-sync-with\fR \fInode\fR
This method tests if the instance is able to synchronize its
generation of frames with the the other production \fInode\fR. This
argument is the object command of another kinetcl instance.
.sp
The result is a boolean value, \fBtrue\fR if the viewpoint of
\fInode\fR is supported, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBstart-sync-with\fR \fInode\fR
This method causes the instance's to synchronize its frame generation
with the other production \fInode\fR. This argument is the object
command of another kinetcl instance.
.sp
The result of the method is an empty string. An error is thrown
if the instance is not able to synchronize with \fInode\fR.
.TP
\fIinstanceCmd\fR \fBstop-sync-with\fR \fInode\fR
This method causes the instance's to decouple its frame generation
from the other production \fInode\fR. This argument is the object
command of another kinetcl instance.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBsynced-with\fR \fInode\fR
This method tests if the instance is currently synchronized to the
other production \fInode\fR. This argument is the object command of
another kinetcl instance.
.sp
The result is a boolean value, \fBtrue\fR if the instance is
synchronized to \fInode\fR, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBset-callback-framesync\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-framesync\fR
These methods define and remove a callback responding to frame synchronization
changes, i.e. when a node starts or stops synchronization with another node.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "framesync", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "INSTANCE HAND TOUCHING FOV EDGE API"
Should a production node support the API for "Hand Touching FOV Edge"
events the following methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name
\fBhand-touching-fov-edge\fR.
.TP
\fIinstanceCmd\fR \fBset-callback-fovEdge\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-fovEdge\fR
These methods define and remove a callback responding to edge touch
events, i.e. a hand coming into contact with the edge of the field of
view (a box).
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "fovEdge", The id of the hand? (user?) causing the event, the
position of the hand in space, a timestamp, and the direction of the
edge that is touched on.
.sp
The 3D-position is a 3-element list of floating point values
containing the x-, y-, and z-coordinates, in this order.
.sp
The timestamp is a floating point value in seconds.
.sp
The direction is one of
.RS
.IP [1]
\fBillegal\fR
.IP [2]
\fBleft\fR
.IP [3]
\fBright\fR
.IP [4]
\fBup\fR
.IP [5]
\fBdown\fR
.IP [6]
\fBforward\fR
.IP [7]
\fBbackward\fR
.RE
.sp
The result of the methods is an empty string.
.PP
.SS MIRROR
Should a production node support the mirror API the following methods
become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBmirror\fR.
.TP
\fIinstanceCmd\fR \fBmirror\fR
In this form the method returns the current state of the instance's
mirror flag.
.sp
The result is a boolean value, \fBtrue\fR if the instance
generates mirrored frames, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBmirror\fR \fIbool\fR
In this form the method (un)sets the instance's mirror flag.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-mirror\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-mirror\fR
These methods define and remove a callback responding to mirror
configuration changes, i.e. when the instance's mirror flag is
reconfigured.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "mirror", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "INSTANCE POSE DETECTION API"
Should a production node support the pose detection API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name
\fBuser-pose-detection\fR.
.TP
\fIinstanceCmd\fR \fBposes\fR
This method returns a list containing the names of the supported user
poses.
.TP
\fIinstanceCmd\fR \fBis-supported\fR \fIpose\fR
This method tests if the named user pose is supported by the instance.
.sp
The result is a boolean value, \fBtrue\fR if the pose is
supported, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBstart-detection\fR \fIuser\fR \fIpose\fR
This method activates the detection of the named \fIpose\fR for the
specified \fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstop-detection\fR \fIuser\fR \fIpose\fR
This method deactivates the detection of the named \fIpose\fR for the
specified \fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstop-all-detection\fR \fIuser\fR
This method deactivates the detection of any poses for the specified
\fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstatus\fR \fIuser\fR \fIpose\fR
This method queries the status of the detection of the named \fIpose\fR
for the specified \fIuser\fR.
.sp
The result of the method is 3-element string containing, in the named order
.RS
.IP [1]
The state of the user with respect to the pose,
one of \fBin\fR, \fBout\fR, or \fBunkown\fR
.IP [2]
The status of the detection progress.
.IP [3]
A timestamp telling us when the user entered the pose, if it is
in the pose. If the user is out of the pose \fB0\fR is returned
here.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-poseEnter\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-poseEnter\fR
These methods define and remove a callback responding to pose entry
events, i.e. a user entering a pose.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "poseEnter", the name of the pose entered and the (numerical)
id of the user entering it, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-poseExit\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-poseExit\fR
These methods define and remove a callback responding to pose exit
events, i.e. a user existing a pose.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "poseExit", the name of pose, and the (numerical) id of the
user exiting it, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-poseProgress\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-poseProgress\fR
These methods define and remove a callback responding to pose progress
events, i.e. the steps of the engine for detecting user poses.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "poseProgress", the name of pose, the (numerical) id of the
user, and the status of the detection engine, in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "INSTANCE SKELETON/JOINT API"
Should a production node support the skeleton API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name
\fBuser-skeleton\fR.
.TP
\fIinstanceCmd\fR \fBneed-pose\fR
This method tests if the skeleton tracking requires the user to enter
a pose for calibration.
.sp
The result is a boolean value, \fBtrue\fR if entering a pose
is required, and \fBfalse\fR else.
\fINOTE\fR: XXX. The C API to query the name of the required pose
looks to be borken, or underspecified. Research required.
.TP
\fIinstanceCmd\fR \fBis-profile-available\fR \fIprofile\fR
This method tests if the skeleton tracking supports the named
\fIprofile\fR.
.sp
The result is a boolean value, \fBtrue\fR if the profile is
supported, and \fBfalse\fR else.
.sp
The accepted profile names are
.RS
.IP [1]
\fBnone\fR
.IP [2]
\fBall\fR
.IP [3]
\fBupper\fR
.IP [4]
\fBlower\fR
.IP [5]
\fBheads-hands\fR
.RE
.TP
\fIinstanceCmd\fR \fBset-profile\fR \fIprofile\fR
This method activates the named \fIprofile\fR. This will result in
joints getting activated or deactivated, as per the profile.
.sp
The accepted profile names are described above, at
\fBis-profile-available\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBset-smoothing\fR \fIfactor\fR
This method sets the skeleton smoothing \fIfactor\fR, a floating point
value.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstart-tracking\fR \fIid\fR
This method activates the tracking of the skeleton for the user
specified by the \fIid\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBstop-tracking\fR \fIid\fR
This method stops tracking of the skeleton for the user
specified by the \fIid\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBreset-tracking\fR \fIid\fR
This method discards the calibration of the skeleton for the user
specified by the \fIid\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBis-tracking\fR \fIid\fR
This method tests if the skeleton for the user \fIid\fR is currently
tracked.
.sp
The result is a boolean value, \fBtrue\fR if tracking is
active, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBis-calibrated\fR \fIid\fR
This method tests if the skeleton for the user \fIid\fR is calibrated.
.sp
The result is a boolean value, \fBtrue\fR if the skeleton is
calbrated, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBis-calibrating\fR \fIid\fR
This method tests if calibration of the skeleton for the user \fIid\fR
is currently in progress.
.sp
The result is a boolean value, \fBtrue\fR if calibration is
in progress, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBrequest-calibration\fR \fIid\fR \fIforce\fR
This method requests calibration of the skeleton for the user
specified by the \fIid\fR.
.sp
The result of the method is an empty string.
.sp
If the boolean flag \fIforce\fR is set any previous calibration
data is discarded.
.TP
\fIinstanceCmd\fR \fBabort-calibration\fR \fIid\fR
This method stops a calibration in progress, for the user specified by
the \fIid\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBsave-calibration-file\fR \fIid\fR \fIpath\fR
This method saves the calibration data for the skeleton of the user
specified by the \fIid\fR into the file \fIpath\fR. The format of the
calibration data is not documented.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBload-calibration-file\fR \fIid\fR \fIpath\fR
This method loads the calibration data for the skeleton of the user
specified by the \fIid\fR from the file \fIpath\fR. The format of the
calibration data is not documented.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBsave-calibration\fR \fIid\fR \fIslot\fR
This method saves the calibration data for the skeleton of the user
specified by the \fIid\fR into the in-memory storage identified by the
\fIslot\fR number.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBload-calibration-slot\fR \fIid\fR \fIslot\fR
This method loads the calibration data for the skeleton of the user
specified by the \fIid\fR from the in-memory storage identified by the
\fIslot\fR number.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBclear-calibration-slot\fR \fIslot\fR
This method clears the in-memory calibration data storage identified
by the \fIslot\fR number.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBis-calibration-slot\fR \fIslot\fR
This method tests if the in-memory storage identified by the
\fIslot\fR number contains skeleton calibration data.
.sp
The result is a boolean value, \fBtrue\fR if the slot is
occupied, and \fBfalse\fR else.
.TP
\fIinstanceCmd\fR \fBis-joint-available\fR \fIjoint\fR
This method tests if the skeleton tracking supports the named
\fIjoint\fR.
.sp
The result is a boolean value, \fBtrue\fR if the joint is
supported, and \fBfalse\fR else.
.sp
The accepted joint names are
.RS
.IP [1]
\fBhead\fR
.IP [2]
\fBneck\fR
.IP [3]
\fBtorso\fR
.IP [4]
\fBwaist\fR
.IP [5]
\fBleft-collar\fR
.IP [6]
\fBleft-shoulder\fR
.IP [7]
\fBleft-elbow\fR
.IP [8]
\fBleft-wrist\fR
.IP [9]
\fBleft-hand\fR
.IP [10]
\fBleft-fingertip\fR
.IP [11]
\fBright-collar\fR
.IP [12]
\fBright-shoulder\fR
.IP [13]
\fBright-elbow\fR
.IP [14]
\fBright-wrist\fR
.IP [15]
\fBright-hand\fR
.IP [16]
\fBright-fingertip\fR
.IP [17]
\fBleft-hip\fR
.IP [18]
\fBleft-knee\fR
.IP [19]
\fBleft-ankle\fR
.IP [20]
\fBleft-foot\fR
.IP [21]
\fBright-hip\fR
.IP [22]
\fBright-knee\fR
.IP [23]
\fBright-ankle\fR
.IP [24]
\fBright-foot\fR
.RE
.TP
\fIinstanceCmd\fR \fBis-joint-active\fR \fIjoint\fR
This method tests if the the named \fIjoint\fR is actively tracked.
.sp
The result is a boolean value, \fBtrue\fR if the joint is
active, and \fBfalse\fR else.
.sp
The accepted joint names are described above, at
\fBis-joint-available\fR.
.TP
\fIinstanceCmd\fR \fBset-joint-active\fR \fIjoint\fR \fIactive\fR
This method (de)activates the named \fIjoint\fR.
.sp
The accepted joint names are described above, at
\fBis-joint-available\fR.
.sp
The result of the method is an empty string.
.TP
\fIinstanceCmd\fR \fBactive-joints\fR
This method returns a list containig the names of all currently active
joints.
.sp
The possible joint names are described above, at
\fBis-joint-available\fR.
.TP
\fIinstanceCmd\fR \fBget-joint\fR \fIuser\fR \fIjoint\fR
This method retrieves position and orientation data for the user
specified by \fIid\fR and the named \fIjoint\fR.
.sp
The accepted joint names are described above, at
\fBis-joint-available\fR.
.sp
The result of the command is a 2-element list containing, in
the order specified:
.RS
.TP
position
A 2-element list containing, in the order specified:
.RS
.TP
confidence
A floating point value representing the system's
confidence in the position information.
.TP
coordinates
A 3-element list of floating point values
representing the x-, y-, and z-position of the joint.
.RE
.TP
orientation
A 2-element list containing, in the order specified:
.RS
.TP
confidence
A floating point value representing the system's
confidence in the orientation information.
.TP
rotation
A 9-element list of floating point values
representating the rotation matrix for the joint.
.RE
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-jointConfigChange\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-jointConfigChange\fR
These methods define and remove a callback responding to joint
configuration changes, i.e. when joints are (de)activated.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "jointConfigChange", in this order.
.sp
The result of the methods is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-calibrationStart\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-calibrationStart\fR
These methods define and remove a callback responding to the start of
a calibration.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "calibrationStart", and the (numerical) id of the
user for whom calibration has started, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIinstanceCmd\fR \fBset-callback-calibrationComplete\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-calibrationComplete\fR
These methods define and remove a callback responding to the
completion of calibrations.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "calibrationComplete", the (numerical) id of the user for
whom calibration completed, and the completion status, in this order.
.sp
The result of the methods is an empty string.
.sp
The possible completion stati are
.RS
.IP [1]
\fBok\fR
.IP [2]
\fBno-user\fR
.IP [3]
\fBarm\fR
.IP [4]
\fBleg\fR
.IP [5]
\fBhead\fR
.IP [6]
\fBtorso\fR
.IP [7]
\fBtop-fov\fR
.IP [8]
\fBside-fov\fR
.IP [9]
\fBpose\fR
.IP [10]
\fBmanual-abort\fR
.IP [11]
\fBmanual-reset\fR
.IP [12]
\fBtimeout\fR
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-calibrationProgress\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-calibrationProgress\fR
These methods define and remove a callback responding to calibration
progress events.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "calibrationProgress", the (numerical) id of the user, and the
calibration progreess status, in this order.
.sp
The result of the methods is an empty string.
.sp
The possible progress stati are identical to the completion
stati described above.
.PP
.SS "BACKLIGHT COMPENSATION"
Should a production node support the backlight-compensation API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBbacklight-compensation\fR.
.TP
\fIinstanceCmd\fR \fBbacklight-compensation\fR
In this form the method returns the current state of the instance's
backlight-compensation setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBbacklight-compensation\fR \fIvalue\fR
In this form the method changes the instance's backlight-compensation setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBbacklight-compensation-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-backlightCompensation\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-backlightCompensation\fR
These methods define and remove a callback responding to backlightCompensation
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "backlightCompensation", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS BRIGHTNESS
Should a production node support the brightness API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBbrightness\fR.
.TP
\fIinstanceCmd\fR \fBbrightness\fR
In this form the method returns the current state of the instance's
brightness setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBbrightness\fR \fIvalue\fR
In this form the method changes the instance's brightness setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBbrightness-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-brightness\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-brightness\fR
These methods define and remove a callback responding to brightness
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "brightness", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "COLOR TEMPERATURE"
Should a production node support the color-temperature API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBcolor-temperature\fR.
.TP
\fIinstanceCmd\fR \fBcolor-temperature\fR
In this form the method returns the current state of the instance's
color-temperature setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBcolor-temperature\fR \fIvalue\fR
In this form the method changes the instance's color-temperature setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBcolor-temperature-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-colorTemperature\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-colorTemperature\fR
These methods define and remove a callback responding to colorTemperature
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "colorTemperature", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS CONTRAST
Should a production node support the contrast API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBcontrast\fR.
.TP
\fIinstanceCmd\fR \fBcontrast\fR
In this form the method returns the current state of the instance's
contrast setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBcontrast\fR \fIvalue\fR
In this form the method changes the instance's contrast setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBcontrast-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-contrast\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-contrast\fR
These methods define and remove a callback responding to contrast
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "contrast", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS EXPOSURE
Should a production node support the exposure API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBexposure\fR.
.TP
\fIinstanceCmd\fR \fBexposure\fR
In this form the method returns the current state of the instance's
exposure setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBexposure\fR \fIvalue\fR
In this form the method changes the instance's exposure setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBexposure-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-exposure\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-exposure\fR
These methods define and remove a callback responding to exposure
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "exposure", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS FOCUS
Should a production node support the focus API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBfocus\fR.
.TP
\fIinstanceCmd\fR \fBfocus\fR
In this form the method returns the current state of the instance's
focus setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBfocus\fR \fIvalue\fR
In this form the method changes the instance's focus setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBfocus-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-focus\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-focus\fR
These methods define and remove a callback responding to focus
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "focus", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS GAIN
Should a production node support the gain API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBgain\fR.
.TP
\fIinstanceCmd\fR \fBgain\fR
In this form the method returns the current state of the instance's
gain setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBgain\fR \fIvalue\fR
In this form the method changes the instance's gain setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBgain-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-gain\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-gain\fR
These methods define and remove a callback responding to gain
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "gain", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS GAMMA
Should a production node support the gamma API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBgamma\fR.
.TP
\fIinstanceCmd\fR \fBgamma\fR
In this form the method returns the current state of the instance's
gamma setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBgamma\fR \fIvalue\fR
In this form the method changes the instance's gamma setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBgamma-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-gamma\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-gamma\fR
These methods define and remove a callback responding to gamma
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "gamma", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS HUE
Should a production node support the hue API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBhue\fR.
.TP
\fIinstanceCmd\fR \fBhue\fR
In this form the method returns the current state of the instance's
hue setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBhue\fR \fIvalue\fR
In this form the method changes the instance's hue setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBhue-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-hue\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-hue\fR
These methods define and remove a callback responding to hue
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "hue", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS IRIS
Should a production node support the iris API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBiris\fR.
.TP
\fIinstanceCmd\fR \fBiris\fR
In this form the method returns the current state of the instance's
iris setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBiris\fR \fIvalue\fR
In this form the method changes the instance's iris setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBiris-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-iris\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-iris\fR
These methods define and remove a callback responding to iris
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "iris", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "LOWLIGHT COMPENSATION"
Should a production node support the lowlight-compensation API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBlowlight-compensation\fR.
.TP
\fIinstanceCmd\fR \fBlowlight-compensation\fR
In this form the method returns the current state of the instance's
lowlight-compensation setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBlowlight-compensation\fR \fIvalue\fR
In this form the method changes the instance's lowlight-compensation setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBlowlight-compensation-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-lowlightCompensation\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-lowlightCompensation\fR
These methods define and remove a callback responding to lowlightCompensation
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "lowlightCompensation", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS PAN
Should a production node support the pan API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBpan\fR.
.TP
\fIinstanceCmd\fR \fBpan\fR
In this form the method returns the current state of the instance's
pan setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBpan\fR \fIvalue\fR
In this form the method changes the instance's pan setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBpan-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-pan\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-pan\fR
These methods define and remove a callback responding to pan
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "pan", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS ROLL
Should a production node support the roll API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBroll\fR.
.TP
\fIinstanceCmd\fR \fBroll\fR
In this form the method returns the current state of the instance's
roll setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBroll\fR \fIvalue\fR
In this form the method changes the instance's roll setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBroll-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-roll\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-roll\fR
These methods define and remove a callback responding to roll
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "roll", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS SATURATION
Should a production node support the saturation API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBsaturation\fR.
.TP
\fIinstanceCmd\fR \fBsaturation\fR
In this form the method returns the current state of the instance's
saturation setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBsaturation\fR \fIvalue\fR
In this form the method changes the instance's saturation setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBsaturation-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-saturation\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-saturation\fR
These methods define and remove a callback responding to saturation
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "saturation", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS SHARPNESS
Should a production node support the sharpness API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBsharpness\fR.
.TP
\fIinstanceCmd\fR \fBsharpness\fR
In this form the method returns the current state of the instance's
sharpness setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBsharpness\fR \fIvalue\fR
In this form the method changes the instance's sharpness setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBsharpness-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-sharpness\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-sharpness\fR
These methods define and remove a callback responding to sharpness
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "sharpness", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS TILT
Should a production node support the tilt API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBtilt\fR.
.TP
\fIinstanceCmd\fR \fBtilt\fR
In this form the method returns the current state of the instance's
tilt setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBtilt\fR \fIvalue\fR
In this form the method changes the instance's tilt setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBtilt-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-tilt\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-tilt\fR
These methods define and remove a callback responding to tilt
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "tilt", in this order.
.sp
The result of the methods is an empty string.
.PP
.SS ZOOM
Should a production node support the zoom API the following
methods become available.
This support can checked by invoking the inherited method
\fBis-capable-of\fR for the capability name \fBzoom\fR.
.TP
\fIinstanceCmd\fR \fBzoom\fR
In this form the method returns the current state of the instance's
zoom setting.
.sp
The result is an integer.
.TP
\fIinstanceCmd\fR \fBzoom\fR \fIvalue\fR
In this form the method changes the instance's zoom setting
to the specified \fIvalue\fR.
.sp
The result is an empty string.
.TP
\fIinstanceCmd\fR \fBzoom-range\fR
This method returns a dictionary describing the allowed domain of
values for the capability. The keys and associated values are:
.RS
.TP
\fBmin\fR
The value is an integer number, the minimal value the setting is
allowed to have.
.TP
\fBmax\fR
The value is an integer number, the maximal value the setting is
allowed to have.
.TP
\fBdefault\fR
The value is an integer number, the default value the setting will
have after node construction.
.TP
\fBstep\fR
The value is an integer number, the difference between two legal
values of the setting.
The difference between \fBmin\fR and \fBmax\fR is a multiple of
this value.
.TP
\fBauto\fR
A boolean value. If \fBtrue\fR the setting supports automatic
adjustment during operation of the node, otherwise not.
.RE
.TP
\fIinstanceCmd\fR \fBset-callback-zoom\fR \fIcmd\fR...
.TP
\fIinstanceCmd\fR \fBunset-callback-zoom\fR
These methods define and remove a callback responding to zoom
configuration changes.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "zoom", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the \fIKineTcl Tracker\fR [http://chiselapp.com/user/andreas_kupries/repository/KineTcl].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
3D vision, Kinect, OpenNI, PrimeSense, computer vision, tracking, volume sensor
.SH CATEGORY
3rd party library binding
.SH COPYRIGHT
.nf
Copyright (c) 2012 Andreas Kupries
Copyright (c) 2012 Documentation, Andreas Kupries

.fi