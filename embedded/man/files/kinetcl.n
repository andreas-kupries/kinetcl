'\"
'\" Generated from file '/home/aku/Projects/KineTcl/kinetcl/embedded/man/files/kinetcl.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2012 Andreas Kupries
'\" Copyright (c) 2012 Documentation, Andreas Kupries
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "kinetcl" n 0.1 doc "KineTcl"
.BS
.SH NAME
kinetcl \- KineTcl - API
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBkinetcl  ?0.1?\fR
.sp
\fB::kinetcl::depth\fR
.sp
\fIdepthInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::image\fR
.sp
\fIimageInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::ir\fR
.sp
\fIirIstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::gesture\fR
.sp
\fIgestureInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::scene\fR
.sp
\fIsceneInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::user\fR
.sp
\fIuserInstanceCmd\fR \fBdestroy\fR
.sp
\fIuserInstanceCmd\fR \fBcount\fR
.sp
\fIuserInstanceCmd\fR \fBusers\fR
.sp
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBonEnter\fR
.sp
\fIuserInstanceCmd\fR \fBonEnter\fR \fIcmd\fR \fIarg\fR...
.sp
\fIuserInstanceCmd\fR \fBonExit\fR
.sp
\fIuserInstanceCmd\fR \fBonExit\fR \fIcmd\fR \fIarg\fR...
.sp
\fIuserInstanceCmd\fR \fBonNewOrLost\fR
.sp
\fIuserInstanceCmd\fR \fBonNewOrLost\fR \fIcmd\fR \fIarg\fR...
.sp
\fB::kinetcl::hands\fR
.sp
\fIhandsInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::audio\fR
.sp
\fIaudioInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::recorder\fR
.sp
\fIrecorderInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::player\fR
.sp
\fIplayerInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::script\fR
.sp
\fIscriptInstanceCmd\fR \fBdestroy\fR
.sp
.BE
.SH DESCRIPTION
.SH API
.SH "DEPTH GENERATOR"
This sections documents the class \fB::kinetcl::depth\fR,
which provides instances of depth generators,
derived from generators,
derived from production nodes.
.PP
... describe depth generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::depth\fR
This command creates a new depth generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIdepthInstanceCmd\fR \fBdestroy\fR
This method destroys the depth generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "IMAGE GENERATOR"
This sections documents the class \fB::kinetcl::image\fR,
which provides instances of image generators,
derived from generators,
derived from production nodes.
.PP
... describe image generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::image\fR
This command creates a new image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIimageInstanceCmd\fR \fBdestroy\fR
This method destroys the image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "IR GENERATOR"
This sections documents the class \fB::kinetcl::ir\fR,
which provides instances of ir image generators,
derived from generators,
derived from production nodes.
.PP
... describe ir generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::ir\fR
This command creates a new ir image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIirIstanceCmd\fR \fBdestroy\fR
This method destroys the ir image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "GESTURE GENERATOR"
This sections documents the class \fB::kinetcl::gesture\fR,
which provides instances of gesture generators,
derived from generators,
derived from production nodes.
.PP
... describe gesture generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::gesture\fR
This command creates a new gesture generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgestureInstanceCmd\fR \fBdestroy\fR
This method destroys the gesture generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "SCENE ANALYZER"
This sections documents the class \fB::kinetcl::scene\fR,
which provides instances of scene analyzers,
derived from generators,
derived from production nodes.
.PP
... describe scene analyzer ....
.SS "CLASS API"
.TP
\fB::kinetcl::scene\fR
This command creates a new scene analyzer instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIsceneInstanceCmd\fR \fBdestroy\fR
This method destroys the scene analyzer instance and releases all
associated resources, including the instance command.  Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "USER GENERATOR"
This sections documents the class \fB::kinetcl::user\fR,
which provides instances of user generators,
derived from generators,
derived from production nodes.
.PP
... describe user generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::user\fR
This command creates a new user generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIuserInstanceCmd\fR \fBdestroy\fR
This method destroys the user generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIuserInstanceCmd\fR \fBcount\fR
This method returns the number of users currently tracked by the
user generator instance.
.TP
\fIuserInstanceCmd\fR \fBusers\fR
This method returns a list containing the ids of the users currently
tracked by the user generator instance.
.TP
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
This method returns the center location for the user specified by its
id, as a 3-element list, i.e. vector, of integer coordinates. The
coordinates are specified in the order of X, Y, and Z.
.sp
The method will throw an error if the user id is not valid.
.TP
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
This method is \fInot implemented\fR. When done it will return a
\fBcrimp\fR image of type \fB<unknown>\fR where all pixels
representing the user are set to the user's id, and everything else
set to \fB0\fR.
.TP
\fIuserInstanceCmd\fR \fBonEnter\fR
.TP
\fIuserInstanceCmd\fR \fBonEnter\fR \fIcmd\fR \fIarg\fR...
This method removes (first syntax) or sets (second syntax) a command
prefix to be called when a user which left the scene re-enters it.
.sp
The command prefix is invoked with the id of the re-entering
user as the last argument.
.TP
\fIuserInstanceCmd\fR \fBonExit\fR
.TP
\fIuserInstanceCmd\fR \fBonExit\fR \fIcmd\fR \fIarg\fR...
This method removes (first syntax) or sets (second syntax) a command
prefix to be called when a user leaves the scene.
.sp
The command prefix is invoked with the id of the leaving user
as the last argument.
.TP
\fIuserInstanceCmd\fR \fBonNewOrLost\fR
.TP
\fIuserInstanceCmd\fR \fBonNewOrLost\fR \fIcmd\fR \fIarg\fR...
This method removes (first syntax) or sets (second syntax) a command
prefix to be called when a new user is detected in the scene, or an
existing user completely lost.
.sp
The command prefix is invoked with two arguments, the event
happening (\fBnew\fR or \fBlost\fR), and the id of the new/lost
user, in this order.
.PP
.SH "HANDS GENERATOR"
This sections documents the class \fB::kinetcl::hands\fR,
which provides instances of hands generators,
derived from generators,
derived from production nodes.
.PP
... describe hands generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::hands\fR
This command creates a new hands generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIhandsInstanceCmd\fR \fBdestroy\fR
This method destroys the hands generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "AUDIO GENERATOR"
This sections documents the class \fB::kinetcl::audio\fR,
which provides instances of audio generators,
derived from generators,
derived from production nodes.
.PP
... describe audio generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::audio\fR
This command creates a new audio generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIaudioInstanceCmd\fR \fBdestroy\fR
This method destroys the audio generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "RECORDER NODE"
This sections documents the class \fB::kinetcl::recorder\fR,
which provides instances of recorders,
derived from generators,
derived from production nodes.
.PP
... describe recorder generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::recorder\fR
This command creates a new recorder instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIrecorderInstanceCmd\fR \fBdestroy\fR
This method destroys the recorder instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "PLAYER NODE"
This sections documents the class \fB::kinetcl::player\fR,
which provides instances of players,
derived from generators,
derived from production nodes.
.PP
... describe player generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::player\fR
This command creates a new player instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIplayerInstanceCmd\fR \fBdestroy\fR
This method destroys the player instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "SCRIPT NODE"
This sections documents the class \fB::kinetcl::script\fR,
which provides instances of scripts,
derived from generators,
derived from production nodes.
.PP
... describe script generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::script\fR
This command creates a new script instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIscriptInstanceCmd\fR \fBdestroy\fR
This method destroys the script instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH KEYWORDS
Kinect, OpenNI, PrimeSense, computer vision
.SH COPYRIGHT
.nf
Copyright (c) 2012 Andreas Kupries
Copyright (c) 2012 Documentation, Andreas Kupries

.fi