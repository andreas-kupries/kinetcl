'\"
'\" Generated from file '/home/aku/Projects/KineTcl/kinetcl/embedded/man/files/kinetcl.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2012 Andreas Kupries
'\" Copyright (c) 2012 Documentation, Andreas Kupries
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "kinetcl" n 0.1 doc "KineTcl"
.BS
.SH NAME
kinetcl \- KineTcl - API
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBkinetcl  ?0.1?\fR
.sp
\fB::kinetcl::base\fR \fBnew\fR
.sp
\fB::kinetcl::base\fR \fBcreate\fR \fIobjname\fR
.sp
\fIbaseInstanceCmd\fR \fBcapabilities\fR ?\fB-all\fR?
.sp
\fIbaseInstanceCmd\fR \fBisCapableOf\fR \fIcapability\fR
.sp
\fB::kinetcl::generator\fR \fBnew\fR
.sp
\fB::kinetcl::generator\fR \fBcreate\fR \fIobjname\fR
.sp
\fIgeneratorInstanceCmd\fR \fBstart\fR
.sp
\fIgeneratorInstanceCmd\fR \fBstop\fR
.sp
\fIgeneratorInstanceCmd\fR \fBactive\fR
.sp
\fIgeneratorInstanceCmd\fR \fBupdate\fR
.sp
\fIgeneratorInstanceCmd\fR \fBhasNew\fR
.sp
\fIgeneratorInstanceCmd\fR \fBisNew\fR
.sp
\fIgeneratorInstanceCmd\fR \fBframe\fR
.sp
\fIgeneratorInstanceCmd\fR \fBtime\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-active\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-active\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-newdata\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-newdata\fR
.sp
\fB::kinetcl::generator\fR \fBnew\fR
.sp
\fB::kinetcl::generator\fR \fBcreate\fR \fIobjname\fR
.sp
\fIgeneratorInstanceCmd\fR \fBbytes_pixel\fR
.sp
\fIgeneratorInstanceCmd\fR \fBmodes\fR
.sp
\fIgeneratorInstanceCmd\fR \fBmode\fR
.sp
\fIgeneratorInstanceCmd\fR \fBmode\fR \fIxres\fR \fIyres\fR \fIfps\fR
.sp
\fIgeneratorInstanceCmd\fR \fBset-callback-mode\fR \fIcmd\fR...
.sp
\fIgeneratorInstanceCmd\fR \fBunset-callback-mode\fR
.sp
\fB::kinetcl::depth\fR
.sp
\fIdepthInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::image\fR
.sp
\fIimageInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::ir\fR
.sp
\fIirIstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::gesture\fR
.sp
\fIgestureInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::scene\fR
.sp
\fIsceneInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::user\fR
.sp
\fIuserInstanceCmd\fR \fBdestroy\fR
.sp
\fIuserInstanceCmd\fR \fBcount\fR
.sp
\fIuserInstanceCmd\fR \fBusers\fR
.sp
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-enter\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-enter\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-exit\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-exit\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-new\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-new\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-lost\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-lost\fR
.sp
\fIuserInstanceCmd\fR \fBposes\fR
.sp
\fIuserInstanceCmd\fR \fBisSupported\fR \fIpose\fR
.sp
\fIuserInstanceCmd\fR \fBstart-detection\fR \fIuser\fR \fIpose\fR
.sp
\fIuserInstanceCmd\fR \fBstop-detection\fR \fIuser\fR \fIpose\fR
.sp
\fIuserInstanceCmd\fR \fBstop-all-detection\fR \fIuser\fR
.sp
\fIuserInstanceCmd\fR \fBstatus\fR \fIuser\fR \fIpose\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-poseEnter\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-poseEnter\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-poseExit\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-poseExit\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-poseProgress\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-poseProgress\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-fovEdge\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-fovEdge\fR
.sp
\fB::kinetcl::hands\fR
.sp
\fIhandsInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::audio\fR
.sp
\fIaudioInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::recorder\fR
.sp
\fIrecorderInstanceCmd\fR \fBdestroy\fR
.sp
\fB::kinetcl::player\fR
.sp
\fIplayerInstanceCmd\fR \fBdestroy\fR
.sp
\fIplayerInstanceCmd\fR \fBspeed\fR \fIspeed\fR
.sp
\fIplayerInstanceCmd\fR \fBspeed\fR
.sp
\fIplayerInstanceCmd\fR \fBrepeat\fR \fIbool\fR
.sp
\fIplayerInstanceCmd\fR \fBeof\fR
.sp
\fIplayerInstanceCmd\fR \fBformat\fR
.sp
\fIplayerInstanceCmd\fR \fBnext\fR
.sp
\fIuserInstanceCmd\fR \fBset-callback-eof\fR \fIcmd\fR...
.sp
\fIuserInstanceCmd\fR \fBunset-callback-eof\fR
.sp
\fB::kinetcl::script\fR
.sp
\fIscriptInstanceCmd\fR \fBdestroy\fR
.sp
.BE
.SH DESCRIPTION
.SH API
.SH BASE
This sections documents the class \fB::kinetcl::base\fR, the (abstract) base
class for all OpenNI production nodes.
.SS "CLASS API"
.TP
\fB::kinetcl::base\fR \fBnew\fR
.TP
\fB::kinetcl::base\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the base.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIbaseInstanceCmd\fR \fBcapabilities\fR ?\fB-all\fR?
This method returns the capabilities of the instance, or, if option
\fB-all\fR was specified, the set of all possible capabilities.
.sp
The result is a list containing the names of the capabilities.
.TP
\fIbaseInstanceCmd\fR \fBisCapableOf\fR \fIcapability\fR
This method checks if the named capability is supported by the
instance or not.
.sp
The result is a boolean value, \fBtrue\fR if the capability
is supported, and \fBfalse\fR else.
.PP
.SH GENERATOR
This sections documents the class \fB::kinetcl::generator\fR, the (abstract) base
class for all OpenNI generator nodes.
.PP
This class inherits from \fB::kinetcl::base\fR.
.SS "CLASS API"
.TP
\fB::kinetcl::generator\fR \fBnew\fR
.TP
\fB::kinetcl::generator\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the generator.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgeneratorInstanceCmd\fR \fBstart\fR
This method causes the instance to start generating output. It implies
the activation of all dependencies as well.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBstop\fR
This method causes the instance to stop generating output.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBactive\fR
This method tests if the instance is generating output.
.sp
The result of the method is a boolean value, \fBtrue\fR if the
instance is generating output, and \fBfalse\fR else.
.TP
\fIgeneratorInstanceCmd\fR \fBupdate\fR
This method causes the instance to update its output to the newest
available. If no new output was available the method blocks until this
happens.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBhasNew\fR
This method tests if the instance has new output available it could be
updated to.  I.e. it checks if the method \fBupdate\fR would block
or not.
.sp
The result of the method is a boolean value, \fBtrue\fR if
the instance has new data (i.e. \fBupdate\fR would not block), and
\fBfalse\fR else.
.TP
\fIgeneratorInstanceCmd\fR \fBisNew\fR
This method tests if the instance's current input frame is new,
i.e. unchanged since the last call to method \fBupdate\fR.
.sp
The result of the method is a boolean value, \fBtrue\fR if
the instance if the current frame is still new, and \fBfalse\fR
else.
.sp
The result of the method is the empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBframe\fR
This method returns the id of the input frame currently handled by the
instance.
.sp
The result of the method is an integer number.
.TP
\fIgeneratorInstanceCmd\fR \fBtime\fR
This method returns the time of the input frame currently handled by
the instance, in microseconds.
.sp
The result of the method is an integer number.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-active\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-active\fR
These methods define and remove a callback responding to activity
events, i.e. the instance starting and stopping the generation of
output.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "active", in this order.
.sp
The result of the methods is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-newdata\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-newdata\fR
These methods define and remove a callback responding to data
events, i.e. the instance having new output available.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "newdata", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "MAP GENERATOR"
This sections documents the class \fB::kinetcl::map\fR, the (abstract) base
class for all OpenNI map generator nodes.
.PP
This class inherits from \fB::kinetcl::generator\fR and its
superclasses.
.SS "CLASS API"
.TP
\fB::kinetcl::generator\fR \fBnew\fR
.TP
\fB::kinetcl::generator\fR \fBcreate\fR \fIobjname\fR
This command creates a new instance of the map generator.
Note that it is \fIimpossible\fR to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.
The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgeneratorInstanceCmd\fR \fBbytes_pixel\fR
This method returns the number of bytes per pixel in the map.
.TP
\fIgeneratorInstanceCmd\fR \fBmodes\fR
This method returns the map output modes supported by the instance.
.sp
The result of the method is a list of modes. Each mode is a
3-element list reporting the x- and y-resolution of the map in pixels,
and the associated frame rate in frames per second, in this order. All
elements are integer numbers.
.TP
\fIgeneratorInstanceCmd\fR \fBmode\fR
This form of the method reports the currently set map output mode.
.sp
The result of the method is a 3-element list reporting the x-
and y-resolution of the map in pixels, and the associated frame rate
in frames per second, in this order. All elements are integer numbers.
.TP
\fIgeneratorInstanceCmd\fR \fBmode\fR \fIxres\fR \fIyres\fR \fIfps\fR
This form of the method changes the map output mode to the specified
resolution and frame rate. The method throws an error if the
combination is not supported by the instance.
.sp
The result of the method is an empty string.
.TP
\fIgeneratorInstanceCmd\fR \fBset-callback-mode\fR \fIcmd\fR...
.TP
\fIgeneratorInstanceCmd\fR \fBunset-callback-mode\fR
These methods define and remove a callback responding to mode change
events, i.e. the instance changing the its output mode.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with two arguments added to it, the instance command,
and the word "mode", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "DEPTH GENERATOR"
This sections documents the class \fB::kinetcl::depth\fR,
which provides instances of depth generators,
derived from generators,
derived from production nodes.
.PP
... describe depth generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::depth\fR
This command creates a new depth generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIdepthInstanceCmd\fR \fBdestroy\fR
This method destroys the depth generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "IMAGE GENERATOR"
This sections documents the class \fB::kinetcl::image\fR,
which provides instances of image generators,
derived from generators,
derived from production nodes.
.PP
... describe image generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::image\fR
This command creates a new image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIimageInstanceCmd\fR \fBdestroy\fR
This method destroys the image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "IR GENERATOR"
This sections documents the class \fB::kinetcl::ir\fR,
which provides instances of ir image generators,
derived from generators,
derived from production nodes.
.PP
... describe ir generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::ir\fR
This command creates a new ir image generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIirIstanceCmd\fR \fBdestroy\fR
This method destroys the ir image generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "GESTURE GENERATOR"
This sections documents the class \fB::kinetcl::gesture\fR,
which provides instances of gesture generators,
derived from generators,
derived from production nodes.
.PP
... describe gesture generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::gesture\fR
This command creates a new gesture generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIgestureInstanceCmd\fR \fBdestroy\fR
This method destroys the gesture generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "SCENE ANALYZER"
This sections documents the class \fB::kinetcl::scene\fR,
which provides instances of scene analyzers,
derived from generators,
derived from production nodes.
.PP
... describe scene analyzer ....
.SS "CLASS API"
.TP
\fB::kinetcl::scene\fR
This command creates a new scene analyzer instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIsceneInstanceCmd\fR \fBdestroy\fR
This method destroys the scene analyzer instance and releases all
associated resources, including the instance command.  Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "USER GENERATOR"
This sections documents the class \fB::kinetcl::user\fR, the concrete class
for all OpenNI user generator nodes.
.PP
This class inherits from \fB::kinetcl::generator\fR and its
superclasses.
.SS "CLASS API"
.TP
\fB::kinetcl::user\fR
This command creates a new user generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIuserInstanceCmd\fR \fBdestroy\fR
This method destroys the user generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIuserInstanceCmd\fR \fBcount\fR
This method returns the number of users currently tracked by the
user generator instance.
.TP
\fIuserInstanceCmd\fR \fBusers\fR
This method returns a list containing the ids of the users currently
tracked by the user generator instance.
.TP
\fIuserInstanceCmd\fR \fBcenterof\fR \fIid\fR
This method returns the center location for the user specified by its
id, as a 3-element list, i.e. vector, of integer coordinates. The
coordinates are specified in the order of X, Y, and Z.
.sp
The method will throw an error if the user id is not valid.
.TP
\fIuserInstanceCmd\fR \fBpixelsof\fR \fIid\fR
This method is \fInot implemented\fR. When done it will return a
\fBcrimp\fR image of type \fB<unknown>\fR where all pixels
representing the user are set to the user's id, and everything else
set to \fB0\fR.
.TP
\fIuserInstanceCmd\fR \fBset-callback-enter\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-enter\fR
These methods define and remove a callback responding to re-entry
events, i.e. a user re-entering the scene after exiting it.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "enter", and the (numerical) id of the user
re-entering, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-exit\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-exit\fR
These methods define and remove a callback responding to exit events,
i.e. a user exiting the scene.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "exit", and the (numerical) id of the user exiting,
in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-new\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-new\fR
These methods define and remove a callback responding to "new user"
events, i.e. when a new user is identified.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "new", and the (numerical) id of the newly
identified user, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-lost\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-lost\fR
These methods define and remove a callback responding to "lost user"
events, i.e. when a user is no longer identified.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, the word "lost", and the (numerical) id of the lost user, in
this order.
.sp
The result of the methods is an empty string.
.PP
.SS "INSTANCE POSE DETECTION API"
Should the user generator instance support the pose detection API the
following methods become available. This support can checked by
invoking the inherited method \fBisCapableOf\fR for the capability
name \fBuser-pose-detection\fR.
.TP
\fIuserInstanceCmd\fR \fBposes\fR
This method returns a list containing the names of the supported user
poses.
.TP
\fIuserInstanceCmd\fR \fBisSupported\fR \fIpose\fR
This method tests if the named user pose is supported by the instance.
.sp
The result is a boolean value, \fBtrue\fR if the pose is
supported, and \fBfalse\fR else.
.TP
\fIuserInstanceCmd\fR \fBstart-detection\fR \fIuser\fR \fIpose\fR
This method activates the detection of the named \fIpose\fR for the
specified \fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIuserInstanceCmd\fR \fBstop-detection\fR \fIuser\fR \fIpose\fR
This method deactivates the detection of the named \fIpose\fR for the
specified \fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIuserInstanceCmd\fR \fBstop-all-detection\fR \fIuser\fR
This method deactivates the detection of any poses for the specified
\fIuser\fR.
.sp
The result of the method is an empty string.
.TP
\fIuserInstanceCmd\fR \fBstatus\fR \fIuser\fR \fIpose\fR
This method queries the status of the detection of the named \fIpose\fR
for the specified \fIuser\fR.
.sp
The result of the method is 3-element string containing, in the named order
.RS
.IP [1]
The state of the user with respect to the pose,
one of \fBin\fR, \fBout\fR, or \fBunkown\fR
.IP [2]
The status of the detection progress.
.IP [3]
A timestamp telling us when the user entered the pose, if it is
in the pose. If the user is out of the pose \fB0\fR is returned
here.
.RE
.TP
\fIuserInstanceCmd\fR \fBset-callback-poseEnter\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-poseEnter\fR
These methods define and remove a callback responding to pose entry
events, i.e. a user entering a pose.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "poseEnter", the name of the pose entered and the (numerical)
id of the user entering it, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-poseExit\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-poseExit\fR
These methods define and remove a callback responding to pose exit
events, i.e. a user existing a pose.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "poseExit", the name of pose, and the (numerical) id of the
user exiting it, in this order.
.sp
The result of the methods is an empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-poseProgress\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-poseProgress\fR
These methods define and remove a callback responding to pose progress
events, i.e. the steps of the engine for detecting user poses.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with five arguments added to it, the instance command,
the word "poseProgress", the name of pose, the (numerical) id of the
user, and the status of the detection engine, in this order.
.sp
The result of the methods is an empty string.
.PP
.SS "INSTANCE HAND TOUCHING FV EDGE API"
Should the user generator instance support the API for a "Hand
Touching FOV Edge" the following methods become available.
This support can checked by invoking the inherited method
\fBisCapableOf\fR for the capability name
\fBhand-touching-fov-edge\fR.
.TP
\fIuserInstanceCmd\fR \fBset-callback-fovEdge\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-fovEdge\fR
These methods define and remove a callback responding to edge touch
events, i.e. a hand coming into contact with the edge of the field of
view (a box).
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with four arguments added to it, the instance command,
the word "fovEdge", The id of the hand? (user?) causing the event, the
position of the hand in space, a timestamp, and the direction of the
edge that is touched on.
.sp
The 3D-position is a 3-element list containing the x-, y-, and
z-coordinates, in this order.
.sp
The timestamp is a floating point value in seconds.
.sp
The direction is one
.RS
.IP [1]
\fBillegal\fR
.IP [2]
\fBleft\fR
.IP [3]
\fBright\fR
.IP [4]
\fBup\fR
.IP [5]
\fBdown\fR
.IP [6]
\fBforward\fR
.IP [7]
\fBbackward\fR
.RE
.sp
The result of the methods is an empty string.
.PP
.SH "HANDS GENERATOR"
This sections documents the class \fB::kinetcl::hands\fR,
which provides instances of hands generators,
derived from generators,
derived from production nodes.
.PP
... describe hands generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::hands\fR
This command creates a new hands generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIhandsInstanceCmd\fR \fBdestroy\fR
This method destroys the hands generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "AUDIO GENERATOR"
This sections documents the class \fB::kinetcl::audio\fR,
which provides instances of audio generators,
derived from generators,
derived from production nodes.
.PP
... describe audio generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::audio\fR
This command creates a new audio generator instance and returns the
fully qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIaudioInstanceCmd\fR \fBdestroy\fR
This method destroys the audio generator instance and releases all
associated resources, including the instance command. Note that
resources used by multiple instances are released only when the last
instance using them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "RECORDER NODE"
This sections documents the class \fB::kinetcl::recorder\fR,
which provides instances of recorders,
derived from generators,
derived from production nodes.
.PP
... describe recorder generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::recorder\fR
This command creates a new recorder instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIrecorderInstanceCmd\fR \fBdestroy\fR
This method destroys the recorder instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH "PLAYER NODE"
This sections documents the class \fB::kinetcl::player\fR, the concrete class
for all OpenNI player nodes.
.PP
This class inherits from \fB::kinetcl::base\fR.
.SS "CLASS API"
.TP
\fB::kinetcl::player\fR
This command creates a new player instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIplayerInstanceCmd\fR \fBdestroy\fR
This method destroys the player instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBspeed\fR \fIspeed\fR
This method sets the speed of playback as a ratio of the time passed
in the recording. I.e. a speed of \fB1\fR implies playback at the
same frame/rate as recorded, whereas a speed < 1 causes slow-motion,
and a speed > 1 fast-forward.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBspeed\fR
This method returns the speed of playback, as a ratio of the time
passed in the recording.
.sp
The result of the method is a floating point number.
.TP
\fIplayerInstanceCmd\fR \fBrepeat\fR \fIbool\fR
This method activates or deactivates repeating mode. If repeating is
activated (\fIbool\fR is \fBtrue\fR) the player will automatically
rewind to the beginning of the recording when reaching the end, and
continue playing.
.sp
The result of the method is the empty string.
.TP
\fIplayerInstanceCmd\fR \fBeof\fR
This method tests if the player has reached the end of the recording,
or not. Note that this is never \fBtrue\fR when the player is in
repeating mode, however "eof" events are still triggered.
.sp
The result of the method is boolean value, \fBtrue\fR if the
player is at the end of the recording, and \fBfalse\fR else.
.TP
\fIplayerInstanceCmd\fR \fBformat\fR
This method returns the name of the format supported by the player instance.
.TP
\fIplayerInstanceCmd\fR \fBnext\fR
This method causes the player to explicitly advance to the next frame.
.sp
The result of the method is the empty string.
.TP
\fIuserInstanceCmd\fR \fBset-callback-eof\fR \fIcmd\fR...
.TP
\fIuserInstanceCmd\fR \fBunset-callback-eof\fR
These methods define and remove a callback responding to "eof" events,
i.e. when the end of the recording was reached.
.sp
Setting a callback implicitly removes any previous callback set.
.sp
The callback to invoke is specified as a command prefix, and
will be invoked with three arguments added to it, the instance
command, and the word "eof", in this order.
.sp
The result of the methods is an empty string.
.PP
.SH "SCRIPT NODE"
This sections documents the class \fB::kinetcl::script\fR,
which provides instances of scripts,
derived from generators,
derived from production nodes.
.PP
... describe script generator ....
.SS "CLASS API"
.TP
\fB::kinetcl::script\fR
This command creates a new script instance and returns the fully
qualified name of the instance command. The API provided by that
command, i.e. the set of available methods and their semantics is
described in the next subsection.
.PP
.SS "INSTANCE API"
.TP
\fIscriptInstanceCmd\fR \fBdestroy\fR
This method destroys the script instance and releases all associated
resources, including the instance command. Note that resources used
by multiple instances are released only when the last instance using
them is destroyed.
.sp
The result of the method is the empty string.
.PP
.SH KEYWORDS
Kinect, OpenNI, PrimeSense, computer vision
.SH COPYRIGHT
.nf
Copyright (c) 2012 Andreas Kupries
Copyright (c) 2012 Documentation, Andreas Kupries

.fi