
This sections documents the class [cmd {::kinetcl base}], the (abstract) base
class for all OpenNI production nodes.

[para] This class actually inherits from [cmd {::kinetcl nodeevents}]
for the management of events generated by OpenNI node instances. See
section [sectref {Node Events}].

[para] They may have the following capabilities:
[list_begin enumerated]
[enum][sectref {Backlight Compensation}]
[enum][sectref Brightness]
[enum][sectref {Color Temperature}]
[enum][sectref Contrast]
[enum][sectref Exposure]
[enum][sectref Focus]
[enum][sectref Gain]
[enum][sectref Gamma]
[enum][sectref Hue]
[enum][sectref Iris]
[enum][sectref {Lowlight compensation}]
[enum][sectref Pan]
[enum][sectref Roll]
[enum][sectref Saturation]
[enum][sectref Sharpness]
[enum][sectref Tilt]
[enum][sectref Zoom]
[list_end]

[comment %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]
[subsection {Class API}]
[list_begin definitions]
[call [cmd {::kinetcl base}] [method new]]
[call [cmd {::kinetcl base}] [method create] [arg objname]]

This command creates a new instance of the node base.

Note that it is [emph impossible] to create such an instance on its
own. It can be done only as part of constructing the instance of a
concrete class.

The API provided by the instance, i.e. the set of available methods
and their semantics is described in the next subsection.

[list_end]

[comment %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]
[subsection {Instance API}]
[list_begin definitions]

[comment ===============================================================]
[call [arg baseInstanceCmd] [method capabilities] [opt [option -all]]]

This method returns the capabilities of the instance, or, if option
[option -all] was specified, the set of all possible capabilities.

[para] The result is a list containing the names of the capabilities.

[comment ===============================================================]
[call [arg baseInstanceCmd] [method is-capable-of] [arg capability]]

This method checks if the named capability is supported by the
instance or not.

[para] The result is a boolean value, [const true] if the capability
is supported, and [const false] else.

[comment ===============================================================]
[call [arg baseInstanceCmd] [method node-info]]

This method returns a dictionary containing OpenNI's description of the
node. They keys of the dictinary, and the associated values are

[list_begin definitions]
[def [const type]]
The OpenNI type of the node, which is either one of
[list_begin itemized][comment -node-types-]
[item] invalid
[item] device
[item] depth
[item] image
[item] audio
[item] ir
[item] user
[item] recorder
[item] player
[item] gesture
[item] scene
[item] hands
[item] codec
[item] production
[item] generator
[item] map
[item] script
[list_end][comment -node-types-]
or an integer number. The latter is used for unknown custom types
OpenNI has no name for.

[def [const vendor]]
The name of the vendor supplying the library which implements the
node.

[def [const name]]
The name OpenNI has given to the node. This is the same as returned by
method [method node-name].

[def [const version]]
The version of the library implementing the node (see also the key
[const vendor]) as a 4-element list containing major, minor version
number, maintenance id, and build number, in this order.

[def [const create]]
The node's creation detail information.

[list_end]

[comment ===============================================================]
[call [arg baseInstanceCmd] [method node-name]]

This method returns a string holding the OpenNI name of the node.

[comment ===============================================================]
[call [arg baseInstanceCmd] [method bind] [arg event] [arg command]]

This method associates the given [arg command] prefix with the named
[arg event] and arranges for the execution of the command prefix when
the event in question occurs.

[para] The result of the method is an opaque token representing the
binding. It can only be used as argument of method [method unbind],
see below, to remove the binding again.

[para] The command prefix is expected to have the following signature:

[list_begin definitions]
[call [cmd "{*}command"] [arg event] [arg obj] [arg details]]
[list_begin arguments]
[arg event]
The name of the event itself, allowing it to be used as sub-method name.

[arg obj]
The name of the instance generating the event.

[arg details]
A dictionary holding more information about the event. The set of keys
and their values depends on the event itself and is described with the
event. See the sections named [const Events], at all the classes
supporting one or more events.

[list_end]
[list_end]

Each event supported by a specific node class is explained in the
documentation of that class.

[comment ===============================================================]
[call [arg baseInstanceCmd] [method unbind] [arg token]]

This method takes a [arg token] as returned by method [method bind]
(see above), and removes the binding it represents. Afterward the
command prefix from [method bind] is not invoked anymore when the
event the binding was for occurs.

[para] The result of the method is an empty string.

[list_end]
